class Moves:
    def __init__(self):
        # Choregraphe bezier export in Python.
        pass
    def onLoad(self):
        pass
    def onUnload(self):
        #put clean-up code here
        pass
    def onInput_onStart(self):
        pass
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
################################################################################################################################################################################################################################################################################################################################################################################################
    def initial(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([0.4])
        keys.append([0])

        names.append("HeadYaw")
        times.append([0.4])
        keys.append([0])

        names.append("LAnklePitch")
        times.append([0.4])
        keys.append([-0.343155])

        names.append("LAnkleRoll")
        times.append([0.4])
        keys.append([-0.00657455])

        names.append("LElbowRoll")
        times.append([0.4])
        keys.append([-1.00616])

        names.append("LElbowYaw")
        times.append([0.4])
        keys.append([-1.38505])

        names.append("LHand")
        times.append([0.4])
        keys.append([0.252967])

        names.append("LHipPitch")
        times.append([0.4])
        keys.append([-0.440965])

        names.append("LHipRoll")
        times.append([0.4])
        keys.append([0.00186381])

        names.append("LHipYawPitch")
        times.append([0.4])
        keys.append([0])

        names.append("LKneePitch")
        times.append([0.4])
        keys.append([0.7])

        names.append("LShoulderPitch")
        times.append([0.4])
        keys.append([1.40597])

        names.append("LShoulderRoll")
        times.append([0.4])
        keys.append([0.29113])

        names.append("LWristYaw")
        times.append([0.4])
        keys.append([0.00472956])

        names.append("RAnklePitch")
        times.append([0.4])
        keys.append([-0.343155])

        names.append("RAnkleRoll")
        times.append([0.4])
        keys.append([0.0065743])

        names.append("RElbowRoll")
        times.append([0.4])
        keys.append([1.00616])

        names.append("RElbowYaw")
        times.append([0.4])
        keys.append([1.38505])

        names.append("RHand")
        times.append([0.4])
        keys.append([0.252967])

        names.append("RHipPitch")
        times.append([0.4])
        keys.append([-0.440965])

        names.append("RHipRoll")
        times.append([0.4])
        keys.append([-0.00186372])

        names.append("RHipYawPitch")
        times.append([0.4])
        keys.append([0])

        names.append("RKneePitch")
        times.append([0.4])
        keys.append([0.7])

        names.append("RShoulderPitch")
        times.append([0.4])
        keys.append([1.40597])

        names.append("RShoulderRoll")
        times.append([0.4])
        keys.append([-0.29113])

        names.append("RWristYaw")
        times.append([0.4])
        keys.append([0.00472956])

        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolation(names, keys, times, True)
        except BaseException, err:
          print err        

    def ymca(self):
        names = list()
        times = list()
        keys = list()
        names.append("HeadPitch")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[0.386526, [3, -0.333333, 0], [3, 0.24, 0]], [-0.0453786, [3, -0.24, 0], [3, 0.133333, 0]], [0.228638, [3, -0.133333, 0], [3, 0.2, 0]], [-0.06447, [3, -0.2, 0.00739602], [3, 0.373333, -0.0138059]], [-0.0782759, [3, -0.373333, 0.0138059], [3, 0.64, -0.0236673]], [-0.20253, [3, -0.64, 0], [3, 0.16, 0]], [0.386526, [3, -0.16, 0], [3, 0.24, 0]], [-0.0453786, [3, -0.24, 0], [3, 0.133333, 0]], [0.228638, [3, -0.133333, 0], [3, 0.2, 0]], [-0.06447, [3, -0.2, 0], [3, 0.173333, 0]], [0.110406, [3, -0.173333, 0], [3, 0.24, 0]], [-0.326783, [3, -0.24, 0], [3, 0, 0]]])
        names.append("HeadYaw")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[-0.16418, [3, -0.333333, 0], [3, 0.24, 0]], [-0.161112, [3, -0.24, -0.00306794], [3, 0.133333, 0.00170441]], [-0.14884, [3, -0.133333, 0], [3, 0.2, 0]], [-0.153442, [3, -0.2, 0.00460209], [3, 0.373333, -0.00859057]], [-0.865134, [3, -0.373333, 0], [3, 0.64, 0]], [0.130432, [3, -0.64, -0.134992], [3, 0.16, 0.033748]], [0.16418, [3, -0.16, 0], [3, 0.24, 0]], [0.161112, [3, -0.24, 0.00306794], [3, 0.133333, -0.00170441]], [0.14884, [3, -0.133333, 0], [3, 0.2, 0]], [0.153442, [3, -0.2, 0], [3, 0.173333, 0]], [-0.029188, [3, -0.173333, 0], [3, 0.24, 0]], [-0.0245859, [3, -0.24, 0], [3, 0, 0]]])
        names.append("LAnklePitch")
        times.append([0.96, 1.68, 2.68, 3.16, 3.8, 4.04, 4.28, 4.76, 5.24, 5.72, 6.2, 6.92, 7.92, 9.16])
        keys.append([[-0.0353239, [3, -0.333333, 0], [3, 0.24, 0]], [0.0551821, [3, -0.24, -0.0248294], [3, 0.333333, 0.0344853]], [0.14262, [3, -0.333333, 0], [3, 0.16, 0]], [-0.0245859, [3, -0.16, 0], [3, 0.213333, 0]], [0.00523599, [3, -0.213333, 0], [3, 0.08, 0]], [-0.00174533, [3, -0.08, 0], [3, 0.08, 0]], [0.0314159, [3, -0.08, 0], [3, 0.16, 0]], [0.0314159, [3, -0.16, 0], [3, 0.16, 0]], [0.0314159, [3, -0.16, 0], [3, 0.16, 0]], [0.0122173, [3, -0.16, 0], [3, 0.16, 0]], [0.04913, [3, -0.16, 0], [3, 0.24, 0]], [-0.16418, [3, -0.24, 0.0131932], [3, 0.333333, -0.0183239]], [-0.182504, [3, -0.333333, 0], [3, 0.413333, 0]], [-0.0614019, [3, -0.413333, 0], [3, 0, 0]]])
        names.append("LAnkleRoll")
        times.append([0.96, 1.68, 2.68, 3.16, 3.8, 4.28, 4.76, 5.24, 5.72, 6.2, 6.92, 7.92, 9.16])
        keys.append([[-0.205514, [3, -0.333333, 0], [3, 0.24, 0]], [0.122762, [3, -0.24, 0], [3, 0.333333, 0]], [-0.0720561, [3, -0.333333, 0], [3, 0.16, 0]], [0.158044, [3, -0.16, -0.00451276], [3, 0.213333, 0.00601701]], [0.164061, [3, -0.213333, 0], [3, 0.16, 0]], [0.164061, [3, -0.16, 0], [3, 0.16, 0]], [0.164061, [3, -0.16, 0], [3, 0.16, 0]], [0.164061, [3, -0.16, 0], [3, 0.16, 0]], [0.162562, [3, -0.16, 0.000761137], [3, 0.16, -0.000761137]], [0.159494, [3, -0.16, 0.00306794], [3, 0.24, -0.00460192]], [-0.246933, [3, -0.24, 0], [3, 0.333333, 0]], [0.00456004, [3, -0.333333, 0], [3, 0.413333, 0]], [-0.0827941, [3, -0.413333, 0], [3, 0, 0]]])
        names.append("LElbowRoll")
        times.append([0.96, 1.68, 2.08, 2.68, 3.16, 3.8, 4.76, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[-1.50481, [3, -0.333333, 0], [3, 0.24, 0]], [-1.54462, [3, -0.24, 0], [3, 0.133333, 0]], [-1.50481, [3, -0.133333, 0], [3, 0.2, 0]], [-1.50635, [3, -0.2, 0], [3, 0.16, 0]], [-0.752237, [3, -0.16, 0], [3, 0.213333, 0]], [-1.25179, [3, -0.213333, 0], [3, 0.32, 0]], [-0.0349066, [3, -0.32, 0], [3, 0.32, 0]], [-0.0349066, [3, -0.32, 0], [3, 0.16, 0]], [-1.54462, [3, -0.16, 0], [3, 0.24, 0]], [-0.248551, [3, -0.24, 0], [3, 0.133333, 0]], [-1.54462, [3, -0.133333, 0], [3, 0.2, 0]], [-0.0349066, [3, -0.2, 0], [3, 0.173333, 0]], [-1.38056, [3, -0.173333, 0.0742293], [3, 0.24, -0.102779]], [-1.48334, [3, -0.24, 0], [3, 0, 0]]])
        names.append("LElbowYaw")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[0.0628521, [3, -0.333333, 0], [3, 0.24, 0]], [0.061318, [3, -0.24, 0], [3, 0.133333, 0]], [0.0628521, [3, -0.133333, -0.000613612], [3, 0.2, 0.000920418]], [0.06592, [3, -0.2, 0], [3, 0.373333, 0]], [-0.0475121, [3, -0.373333, 0], [3, 0.64, 0]], [0.0541052, [3, -0.64, 0], [3, 0.16, 0]], [-1.51095, [3, -0.16, 0], [3, 0.24, 0]], [0.158044, [3, -0.24, 0], [3, 0.133333, 0]], [-1.51095, [3, -0.133333, 0], [3, 0.2, 0]], [-0.084328, [3, -0.2, 0], [3, 0.173333, 0]], [-0.142704, [3, -0.173333, 0.0583759], [3, 0.24, -0.0808281]], [-0.768577, [3, -0.24, 0], [3, 0, 0]]])
        names.append("LHand")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[0.8264, [3, -0.333333, 0], [3, 0.24, 0]], [0.8276, [3, -0.24, 0], [3, 0.133333, 0]], [0.8264, [3, -0.133333, 0], [3, 0.2, 0]], [0.828, [3, -0.2, -0.00160003], [3, 0.373333, 0.00298672]], [0.9552, [3, -0.373333, 0], [3, 0.64, 0]], [0.9524, [3, -0.64, 0.00279999], [3, 0.16, -0.000699997]], [0.0512, [3, -0.16, 0.00346667], [3, 0.24, -0.0052]], [0.046, [3, -0.24, 0], [3, 0.133333, 0]], [0.0512, [3, -0.133333, -0.000266669], [3, 0.2, 0.000400003]], [0.0516, [3, -0.2, -0.000400003], [3, 0.173333, 0.000346669]], [0.3384, [3, -0.173333, 0], [3, 0.24, 0]], [0, [3, -0.24, 0], [3, 0, 0]]])
        names.append("LHipPitch")
        times.append([0.96, 1.68, 2.68, 3.16, 3.8, 4.28, 4.76, 5.24, 5.72, 6.2, 6.92, 7.92, 9.16])
        keys.append([[-0.151824, [3, -0.333333, 0], [3, 0.24, 0]], [0.340591, [3, -0.24, 0], [3, 0.333333, 0]], [0.248551, [3, -0.333333, 0], [3, 0.16, 0]], [0.415757, [3, -0.16, 0], [3, 0.213333, 0]], [0.220854, [3, -0.213333, 0], [3, 0.16, 0]], [0.220854, [3, -0.16, 0], [3, 0.16, 0]], [0.220854, [3, -0.16, 0], [3, 0.16, 0]], [0.220854, [3, -0.16, 0], [3, 0.16, 0]], [0.21932, [3, -0.16, 0], [3, 0.16, 0]], [0.223922, [3, -0.16, 0], [3, 0.24, 0]], [0.16418, [3, -0.24, 0], [3, 0.333333, 0]], [0.174835, [3, -0.333333, -0.00319582], [3, 0.413333, 0.00396282]], [0.185656, [3, -0.413333, 0], [3, 0, 0]]])
        names.append("LHipRoll")
        times.append([0.96, 1.68, 2.68, 3.16, 3.8, 4.28, 4.76, 5.24, 5.72, 6.2, 6.92, 7.92, 9.16])
        keys.append([[0.274628, [3, -0.333333, 0], [3, 0.24, 0]], [-0.159494, [3, -0.24, 0], [3, 0.333333, 0]], [0.105888, [3, -0.333333, 0], [3, 0.16, 0]], [-0.191709, [3, -0.16, 0], [3, 0.213333, 0]], [-0.067538, [3, -0.213333, 0], [3, 0.16, 0]], [-0.067538, [3, -0.16, 0], [3, 0.16, 0]], [-0.067538, [3, -0.16, 0], [3, 0.16, 0]], [-0.067538, [3, -0.16, 0], [3, 0.16, 0]], [-0.0690719, [3, -0.16, 0.00153397], [3, 0.16, -0.00153397]], [-0.233209, [3, -0.16, 0], [3, 0.24, 0]], [0.352862, [3, -0.24, 0], [3, 0.333333, 0]], [0.0551821, [3, -0.333333, 0], [3, 0.413333, 0]], [0.0859459, [3, -0.413333, 0], [3, 0, 0]]])
        names.append("LHipYawPitch")
        times.append([0.96, 1.68, 2.68, 3.16, 3.8, 4.28, 4.76, 5.24, 5.72, 6.2, 6.92, 7.92, 9.16])
        keys.append([[-0.450955, [3, -0.333333, 0], [3, 0.24, 0]], [-0.510779, [3, -0.24, 0], [3, 0.333333, 0]], [-0.49544, [3, -0.333333, -0.0153397], [3, 0.16, 0.00736304]], [-0.332836, [3, -0.16, 0], [3, 0.213333, 0]], [-0.438078, [3, -0.213333, 0.039738], [3, 0.16, -0.0298035]], [-0.54146, [3, -0.16, 0], [3, 0.16, 0]], [-0.54146, [3, -0.16, 0], [3, 0.16, 0]], [-0.54146, [3, -0.16, 0], [3, 0.16, 0]], [-0.460767, [3, -0.16, -0.00981225], [3, 0.16, 0.00981225]], [-0.450955, [3, -0.16, 0], [3, 0.24, 0]], [-0.493905, [3, -0.24, 0.00110459], [3, 0.333333, -0.00153415]], [-0.49544, [3, -0.333333, 0], [3, 0.413333, 0]], [-0.397265, [3, -0.413333, 0], [3, 0, 0]]])
        names.append("LKneePitch")
        times.append([0.96, 1.68, 2.68, 3.16, 3.8, 4.28, 4.76, 5.24, 5.72, 6.2, 6.92, 7.92, 9.16])
        keys.append([[0.363515, [3, -0.333333, 0], [3, 0.24, 0]], [-0.0629359, [3, -0.24, 0], [3, 0.333333, 0]], [-0.0568, [3, -0.333333, 0], [3, 0.16, 0]], [-0.092082, [3, -0.16, 0], [3, 0.213333, 0]], [-0.052114, [3, -0.213333, 0], [3, 0.16, 0]], [-0.052114, [3, -0.16, 0], [3, 0.16, 0]], [-0.052114, [3, -0.16, 0], [3, 0.16, 0]], [-0.052114, [3, -0.16, 0], [3, 0.16, 0]], [-0.052114, [3, -0.16, 0], [3, 0.16, 0]], [-0.061318, [3, -0.16, 0], [3, 0.24, 0]], [0.288349, [3, -0.24, -0.0243599], [3, 0.333333, 0.0338332]], [0.322183, [3, -0.333333, 0], [3, 0.413333, 0]], [0.0705221, [3, -0.413333, 0], [3, 0, 0]]])
        names.append("LShoulderPitch")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[1.25477, [3, -0.333333, 0], [3, 0.24, 0]], [1.2379, [3, -0.24, 0], [3, 0.133333, 0]], [1.25477, [3, -0.133333, 0], [3, 0.2, 0]], [1.2517, [3, -0.2, 0.00306823], [3, 0.373333, -0.00572736]], [-0.207694, [3, -0.373333, 0], [3, 0.64, 0]], [-0.207694, [3, -0.64, 0], [3, 0.16, 0]], [0.420357, [3, -0.16, 0], [3, 0.24, 0]], [-1.21335, [3, -0.24, 0], [3, 0.133333, 0]], [0.420357, [3, -0.133333, 0], [3, 0.2, 0]], [-0.18097, [3, -0.2, 0.152319], [3, 0.173333, -0.13201]], [-0.43263, [3, -0.173333, 0.109371], [3, 0.24, -0.151437]], [-0.963394, [3, -0.24, 0], [3, 0, 0]]])
        names.append("LShoulderRoll")
        times.append([0.96, 1.68, 2.08, 2.68, 3.16, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[0.5568, [3, -0.333333, 0], [3, 0.24, 0]], [0.599753, [3, -0.24, 0], [3, 0.133333, 0]], [0.5568, [3, -0.133333, 0], [3, 0.2, 0]], [0.559868, [3, -0.2, 0], [3, 0.16, 0]], [0.45204, [3, -0.16, 0.107828], [3, 0.213333, -0.143771]], [-0.309826, [3, -0.213333, 0], [3, 0.64, 0]], [1.31772, [3, -0.64, 0], [3, 0.16, 0]], [0.363599, [3, -0.16, 0.0756763], [3, 0.24, -0.113514]], [0.250085, [3, -0.24, 0], [3, 0.133333, 0]], [0.363599, [3, -0.133333, -0.113514], [3, 0.2, 0.170272]], [1.25025, [3, -0.2, 0], [3, 0.173333, 0]], [0.654977, [3, -0.173333, 0], [3, 0.24, 0]], [1.06609, [3, -0.24, 0], [3, 0, 0]]])
        names.append("LWristYaw")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[-0.20253, [3, -0.333333, 0], [3, 0.24, 0]], [-0.217869, [3, -0.24, 0], [3, 0.133333, 0]], [-0.20253, [3, -0.133333, 0], [3, 0.2, 0]], [-0.207132, [3, -0.2, 0], [3, 0.373333, 0]], [-0.059784, [3, -0.373333, 0], [3, 0.64, 0]], [-0.282215, [3, -0.64, 0], [3, 0.16, 0]], [0.277696, [3, -0.16, 0], [3, 0.24, 0]], [-0.154892, [3, -0.24, 0], [3, 0.133333, 0]], [0.277696, [3, -0.133333, -0.0734275], [3, 0.2, 0.110141]], [0.395814, [3, -0.2, 0], [3, 0.173333, 0]], [-0.280764, [3, -0.173333, 0], [3, 0.24, 0]], [-0.266959, [3, -0.24, 0], [3, 0, 0]]])
        names.append("RAnklePitch")
        times.append([0.96, 1.68, 2.68, 3.16, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 6.2, 6.92, 7.92, 9.16])
        keys.append([[0.04913, [3, -0.333333, 0], [3, 0.24, 0]], [-0.122678, [3, -0.24, 0.032321], [3, 0.333333, -0.0448903]], [-0.182504, [3, -0.333333, 0], [3, 0.16, 0]], [0.0445279, [3, -0.16, -0.0637212], [3, 0.213333, 0.0849616]], [0.263545, [3, -0.213333, 0], [3, 0.08, 0]], [0.0645772, [3, -0.08, 0], [3, 0.08, 0]], [0.297554, [3, -0.08, 0], [3, 0.08, 0]], [0.0645772, [3, -0.08, 0], [3, 0.08, 0]], [0.297554, [3, -0.08, 0], [3, 0.08, 0]], [0.0645772, [3, -0.08, 0], [3, 0.08, 0]], [0.297554, [3, -0.08, 0], [3, 0.08, 0]], [0.0645772, [3, -0.08, 0], [3, 0.08, 0]], [0.297554, [3, -0.08, 0], [3, 0.16, 0]], [-0.0353239, [3, -0.16, 0], [3, 0.24, 0]], [0.01078, [3, -0.24, -0.0248294], [3, 0.333333, 0.0344853]], [0.14262, [3, -0.333333, 0], [3, 0.413333, 0]], [-0.015298, [3, -0.413333, 0], [3, 0, 0]]])
        names.append("RAnkleRoll")
        times.append([0.96, 1.68, 2.68, 3.16, 3.8, 4.28, 4.76, 5.24, 5.72, 6.2, 6.92, 7.92, 9.16])
        keys.append([[-0.159494, [3, -0.333333, 0], [3, 0.24, 0]], [0.230143, [3, -0.24, 0], [3, 0.333333, 0]], [-0.00456004, [3, -0.333333, 0], [3, 0.16, 0]], [0.289967, [3, -0.16, 0], [3, 0.213333, 0]], [0.256136, [3, -0.213333, 0], [3, 0.16, 0]], [0.256136, [3, -0.16, 0], [3, 0.16, 0]], [0.256136, [3, -0.16, 0], [3, 0.16, 0]], [0.256136, [3, -0.16, 0], [3, 0.16, 0]], [0.256136, [3, -0.16, 0], [3, 0.16, 0]], [0.205514, [3, -0.16, 0.0498949], [3, 0.24, -0.0748424]], [-0.118076, [3, -0.24, 0], [3, 0.333333, 0]], [0.0720561, [3, -0.333333, 0], [3, 0.413333, 0]], [0.047596, [3, -0.413333, 0], [3, 0, 0]]])
        names.append("RElbowRoll")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[1.54462, [3, -0.333333, 0], [3, 0.24, 0]], [0.248551, [3, -0.24, 0], [3, 0.133333, 0]], [1.54462, [3, -0.133333, 0], [3, 0.2, 0]], [0.0349066, [3, -0.2, 0], [3, 0.373333, 0]], [1.54462, [3, -0.373333, 0], [3, 0.64, 0]], [1.54462, [3, -0.64, 0], [3, 0.16, 0]], [1.50481, [3, -0.16, 0], [3, 0.24, 0]], [1.54462, [3, -0.24, 0], [3, 0.133333, 0]], [1.50481, [3, -0.133333, 0], [3, 0.2, 0]], [1.50635, [3, -0.2, 0], [3, 0.173333, 0]], [1.49416, [3, -0.173333, 0], [3, 0.24, 0]], [1.53251, [3, -0.24, 0], [3, 0, 0]]])
        names.append("RElbowYaw")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[1.51095, [3, -0.333333, 0], [3, 0.24, 0]], [-0.158044, [3, -0.24, 0], [3, 0.133333, 0]], [1.51095, [3, -0.133333, 0], [3, 0.2, 0]], [0.084328, [3, -0.2, 0.0878861], [3, 0.373333, -0.164054]], [-0.0797261, [3, -0.373333, 0], [3, 0.64, 0]], [-0.0536481, [3, -0.64, 0], [3, 0.16, 0]], [-0.0628521, [3, -0.16, 0], [3, 0.24, 0]], [-0.061318, [3, -0.24, 0], [3, 0.133333, 0]], [-0.0628521, [3, -0.133333, 0.000613612], [3, 0.2, -0.000920418]], [-0.06592, [3, -0.2, 0.00138461], [3, 0.173333, -0.00119999]], [-0.0706059, [3, -0.173333, 0], [3, 0.24, 0]], [0.352778, [3, -0.24, 0], [3, 0, 0]]])
        names.append("RHand")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[0.0512, [3, -0.333333, 0], [3, 0.24, 0]], [0.046, [3, -0.24, 0], [3, 0.133333, 0]], [0.0512, [3, -0.133333, -0.000266669], [3, 0.2, 0.000400003]], [0.0516, [3, -0.2, -0.000400003], [3, 0.373333, 0.000746672]], [0.8268, [3, -0.373333, -0.000466675], [3, 0.64, 0.000800014]], [0.8276, [3, -0.64, 0], [3, 0.16, 0]], [0.8264, [3, -0.16, 0], [3, 0.24, 0]], [0.8276, [3, -0.24, 0], [3, 0.133333, 0]], [0.8264, [3, -0.133333, 0], [3, 0.2, 0]], [0.828, [3, -0.2, -0.000500008], [3, 0.173333, 0.000433341]], [0.8292, [3, -0.173333, 0], [3, 0.24, 0]], [0.8292, [3, -0.24, 0], [3, 0, 0]]])
        names.append("RHipPitch")
        times.append([0.96, 1.68, 2.68, 3.16, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 6.2, 6.92, 7.92, 9.16])
        keys.append([[0.223922, [3, -0.333333, 0], [3, 0.24, 0]], [0.130348, [3, -0.24, 0], [3, 0.333333, 0]], [0.174835, [3, -0.333333, -0.0297127], [3, 0.16, 0.0142621]], [0.262272, [3, -0.16, 0], [3, 0.213333, 0]], [-0.716335, [3, -0.213333, 0], [3, 0.08, 0]], [-0.321141, [3, -0.08, 0], [3, 0.08, 0]], [-0.716335, [3, -0.08, 0], [3, 0.08, 0]], [-0.321141, [3, -0.08, 0], [3, 0.08, 0]], [-0.716335, [3, -0.08, 0], [3, 0.08, 0]], [-0.321141, [3, -0.08, 0], [3, 0.08, 0]], [-0.716335, [3, -0.08, 0], [3, 0.08, 0]], [-0.321141, [3, -0.08, 0], [3, 0.08, 0]], [-0.716335, [3, -0.08, 0], [3, 0.16, 0]], [-0.151824, [3, -0.16, -0.147253], [3, 0.24, 0.220879]], [0.38806, [3, -0.24, 0], [3, 0.333333, 0]], [0.248551, [3, -0.333333, 0.0406327], [3, 0.413333, -0.0503846]], [0.115008, [3, -0.413333, 0], [3, 0, 0]]])
        names.append("RHipRoll")
        times.append([0.96, 1.68, 2.68, 3.16, 3.8, 4.28, 4.76, 5.24, 5.72, 6.2, 6.92, 7.92, 9.16])
        keys.append([[0.233209, [3, -0.333333, 0], [3, 0.24, 0]], [-0.332836, [3, -0.24, 0], [3, 0.333333, 0]], [-0.0551821, [3, -0.333333, 0], [3, 0.16, 0]], [-0.381923, [3, -0.16, 0], [3, 0.213333, 0]], [-0.151908, [3, -0.213333, 0], [3, 0.16, 0]], [-0.151908, [3, -0.16, 0], [3, 0.16, 0]], [-0.151908, [3, -0.16, 0], [3, 0.16, 0]], [-0.151908, [3, -0.16, 0], [3, 0.16, 0]], [-0.151908, [3, -0.16, 0], [3, 0.16, 0]], [-0.274628, [3, -0.16, 0], [3, 0.24, 0]], [0.161112, [3, -0.24, 0], [3, 0.333333, 0]], [-0.105888, [3, -0.333333, 0], [3, 0.413333, 0]], [-0.049046, [3, -0.413333, 0], [3, 0, 0]]])
        names.append("RKneePitch")
        times.append([0.96, 1.68, 2.68, 3.16, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 6.2, 6.92, 7.92, 9.16])
        keys.append([[-0.061318, [3, -0.333333, 0], [3, 0.24, 0]], [0.285367, [3, -0.24, -0.0265075], [3, 0.333333, 0.036816]], [0.322183, [3, -0.333333, 0], [3, 0.16, 0]], [-0.041376, [3, -0.16, 0], [3, 0.213333, 0]], [1.29312, [3, -0.213333, 0], [3, 0.08, 0]], [0.788889, [3, -0.08, 0], [3, 0.08, 0]], [1.29312, [3, -0.08, 0], [3, 0.08, 0]], [0.788889, [3, -0.08, 0], [3, 0.08, 0]], [1.29312, [3, -0.08, 0], [3, 0.08, 0]], [0.788889, [3, -0.08, 0], [3, 0.08, 0]], [1.29312, [3, -0.08, 0], [3, 0.08, 0]], [0.788889, [3, -0.08, 0], [3, 0.08, 0]], [1.29312, [3, -0.08, 0], [3, 0.16, 0]], [0.363515, [3, -0.16, 0.18141], [3, 0.24, -0.272115]], [-0.067454, [3, -0.24, 0], [3, 0.333333, 0]], [-0.0568, [3, -0.333333, -0.010654], [3, 0.413333, 0.013211]], [0.099752, [3, -0.413333, 0], [3, 0, 0]]])
        names.append("RShoulderPitch")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[0.420357, [3, -0.333333, 0], [3, 0.24, 0]], [-1.21335, [3, -0.24, 0], [3, 0.133333, 0]], [0.420357, [3, -0.133333, 0], [3, 0.2, 0]], [-0.18097, [3, -0.2, 0], [3, 0.373333, 0]], [1.15813, [3, -0.373333, 0], [3, 0.64, 0]], [1.12745, [3, -0.64, 0], [3, 0.16, 0]], [1.25477, [3, -0.16, 0], [3, 0.24, 0]], [1.2379, [3, -0.24, 0], [3, 0.133333, 0]], [1.25477, [3, -0.133333, 0], [3, 0.2, 0]], [1.2517, [3, -0.2, 0], [3, 0.173333, 0]], [1.25639, [3, -0.173333, -0.00468623], [3, 0.24, 0.00648863]], [1.62915, [3, -0.24, 0], [3, 0, 0]]])
        names.append("RShoulderRoll")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[-0.363599, [3, -0.333333, 0], [3, 0.24, 0]], [-0.250085, [3, -0.24, 0], [3, 0.133333, 0]], [-0.363599, [3, -0.133333, 0.113514], [3, 0.2, -0.170272]], [-1.25025, [3, -0.2, 0], [3, 0.373333, 0]], [-0.566003, [3, -0.373333, 0], [3, 0.64, 0]], [-0.570606, [3, -0.64, 0], [3, 0.16, 0]], [-0.5568, [3, -0.16, 0], [3, 0.24, 0]], [-0.599753, [3, -0.24, 0], [3, 0.133333, 0]], [-0.5568, [3, -0.133333, 0], [3, 0.2, 0]], [-0.559868, [3, -0.2, 0], [3, 0.173333, 0]], [-0.552281, [3, -0.173333, 0], [3, 0.24, 0]], [-0.584497, [3, -0.24, 0], [3, 0, 0]]])
        names.append("RWristYaw")
        times.append([0.96, 1.68, 2.08, 2.68, 3.8, 5.72, 6.2, 6.92, 7.32, 7.92, 8.44, 9.16])
        keys.append([[-0.277696, [3, -0.333333, 0], [3, 0.24, 0]], [0.154892, [3, -0.24, 0], [3, 0.133333, 0]], [-0.277696, [3, -0.133333, 0.0734275], [3, 0.2, -0.110141]], [-0.395814, [3, -0.2, 0], [3, 0.373333, 0]], [-0.31903, [3, -0.373333, -0.0243122], [3, 0.64, 0.0416781]], [-0.197844, [3, -0.64, -0.121187], [3, 0.16, 0.0302967]], [0.20253, [3, -0.16, -0.0102265], [3, 0.24, 0.0153397]], [0.217869, [3, -0.24, 0], [3, 0.133333, 0]], [0.20253, [3, -0.133333, 0], [3, 0.2, 0]], [0.207132, [3, -0.2, -0.00245032], [3, 0.173333, 0.00212361]], [0.216252, [3, -0.173333, 0], [3, 0.24, 0]], [0.01223, [3, -0.24, 0], [3, 0, 0]]])
        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err
################################################################################################################################################################################################################################################################################################################################################################################################
    def snap(self):
        names = list()
        times = list()
        keys = list()
        names.append("HeadPitch")
        times.append([0.44, 1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[-0.339056, [3, -0.16, 0], [3, 0.266667, 0]], [0.381923, [3, -0.266667, -0.0102276], [3, 0.24, 0.00920485]], [0.391128, [3, -0.24, 0], [3, 0.306667, 0]], [0.391128, [3, -0.306667, 0], [3, 0.306667, 0]], [0.391128, [3, -0.306667, 0], [3, 0.306667, 0]], [0.391128, [3, -0.306667, 0], [3, 0.306667, 0]], [0.391128, [3, -0.306667, 0], [3, 0.306667, 0]], [0.391128, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("HeadYaw")
        times.append([0.44, 1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[-0.0614019, [3, -0.16, 0], [3, 0.266667, 0]], [-0.046062, [3, -0.266667, -0.0017046], [3, 0.24, 0.00153414]], [-0.0445279, [3, -0.24, 0], [3, 0.306667, 0]], [-0.0445279, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0445279, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0445279, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0445279, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0445279, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("LAnklePitch")
        times.append([1.24, 1.64, 1.96, 2.56, 2.88, 3.48, 3.8, 4.4, 4.72, 5.32, 5.64, 6.24, 6.56])
        keys.append([[0.18864, [3, -0.426667, 0], [3, 0.133333, 0]], [0.329867, [3, -0.133333, -0.0920878], [3, 0.106667, 0.0736702]], [0.685914, [3, -0.106667, 0], [3, 0.2, 0]], [0.171042, [3, -0.2, 0.137729], [3, 0.106667, -0.0734556]], [0.0523599, [3, -0.106667, 0.0291394], [3, 0.2, -0.0546364]], [-0.0802851, [3, -0.2, 0], [3, 0.106667, 0]], [-0.0802851, [3, -0.106667, 0], [3, 0.2, 0]], [-0.0418879, [3, -0.2, -0.0288359], [3, 0.106667, 0.0153791]], [0.0523599, [3, -0.106667, -0.0552435], [3, 0.2, 0.103581]], [0.434587, [3, -0.2, -0.100546], [3, 0.106667, 0.0536246]], [0.514872, [3, -0.106667, 0], [3, 0.2, 0]], [0.197222, [3, -0.2, 0.0929296], [3, 0.106667, -0.0495625]], [0.087396, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LAnkleRoll")
        times.append([1.24, 1.64, 1.96, 2.56, 2.88, 3.8, 4.72, 5.32, 5.64, 6.24, 6.56])
        keys.append([[-0.317496, [3, -0.426667, 0], [3, 0.133333, 0]], [-0.322886, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.193243, [3, -0.106667, 0], [3, 0.2, 0]], [-0.200713, [3, -0.2, 0], [3, 0.106667, 0]], [-0.0735901, [3, -0.106667, -0.0350834], [3, 0.306667, 0.100865]], [0.207132, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0994838, [3, -0.306667, 0.0988345], [3, 0.2, -0.0644573]], [-0.282743, [3, -0.2, 0], [3, 0.106667, 0]], [-0.193243, [3, -0.106667, -0.00625526], [3, 0.2, 0.0117286]], [-0.181514, [3, -0.2, -0.0117286], [3, 0.106667, 0.00625526]], [-0.0735901, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LElbowRoll")
        times.append([0.44, 0.84, 1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[-0.604353, [3, -0.16, 0], [3, 0.133333, 0]], [-0.657989, [3, -0.133333, 0.0536357], [3, 0.133333, -0.0536357]], [-1.50021, [3, -0.133333, 0], [3, 0.24, 0]], [-1.48027, [3, -0.24, 0], [3, 0.306667, 0]], [-1.48027, [3, -0.306667, 0], [3, 0.306667, 0]], [-1.48027, [3, -0.306667, 0], [3, 0.306667, 0]], [-1.48027, [3, -0.306667, 0], [3, 0.306667, 0]], [-1.48027, [3, -0.306667, 0], [3, 0.306667, 0]], [-1.48027, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("LElbowYaw")
        times.append([0.44, 1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[-1.36377, [3, -0.16, 0], [3, 0.266667, 0]], [-0.521602, [3, -0.266667, -0.0068184], [3, 0.24, 0.00613656]], [-0.515466, [3, -0.24, 0], [3, 0.306667, 0]], [-0.515466, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.515466, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.515466, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.515466, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.515466, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("LHand")
        times.append([0.44, 0.84, 1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[0.7004, [3, -0.16, 0], [3, 0.133333, 0]], [0.9, [3, -0.133333, 0], [3, 0.133333, 0]], [0.6, [3, -0.133333, 0], [3, 0.24, 0]], [0.6016, [3, -0.24, 0], [3, 0.306667, 0]], [0.6016, [3, -0.306667, 0], [3, 0.306667, 0]], [0.6016, [3, -0.306667, 0], [3, 0.306667, 0]], [0.6016, [3, -0.306667, 0], [3, 0.306667, 0]], [0.6016, [3, -0.306667, 0], [3, 0.306667, 0]], [0.6016, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("LHipPitch")
        times.append([1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[0.082878, [3, -0.426667, 0], [3, 0.24, 0]], [-0.194775, [3, -0.24, 0], [3, 0.306667, 0]], [0.392746, [3, -0.306667, -0.0912336], [3, 0.306667, 0.0912336]], [0.48398, [3, -0.306667, 0], [3, 0.306667, 0]], [0.401949, [3, -0.306667, 0.0820305], [3, 0.306667, -0.0820305]], [-0.194775, [3, -0.306667, 0], [3, 0.306667, 0]], [0.392746, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("LHipRoll")
        times.append([1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[0.397349, [3, -0.426667, 0], [3, 0.24, 0]], [0.50166, [3, -0.24, 0], [3, 0.306667, 0]], [0.139636, [3, -0.306667, 0.110448], [3, 0.306667, -0.110448]], [-0.161028, [3, -0.306667, 0], [3, 0.306667, 0]], [0.14117, [3, -0.306667, -0.110448], [3, 0.306667, 0.110448]], [0.50166, [3, -0.306667, 0], [3, 0.306667, 0]], [0.139636, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("LHipYawPitch")
        times.append([1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[-0.398797, [3, -0.426667, 0], [3, 0.24, 0]], [-0.512313, [3, -0.24, 0], [3, 0.306667, 0]], [-0.449421, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.509245, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.450955, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.512313, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.449421, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("LKneePitch")
        times.append([1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[-0.092082, [3, -0.426667, 0], [3, 0.24, 0]], [-0.066004, [3, -0.24, 0], [3, 0.306667, 0]], [-0.0782759, [3, -0.306667, 0.003068], [3, 0.306667, -0.003068]], [-0.084412, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.075208, [3, -0.306667, -0.003068], [3, 0.306667, 0.003068]], [-0.066004, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0782759, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("LShoulderPitch")
        times.append([0.44, 1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[-1.01862, [3, -0.16, 0], [3, 0.266667, 0]], [-0.0568, [3, -0.266667, -0.0170445], [3, 0.24, 0.01534]], [-0.0414599, [3, -0.24, 0], [3, 0.306667, 0]], [-0.0414599, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0414599, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0414599, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0414599, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0414599, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("LShoulderRoll")
        times.append([0.44, 1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[0.11961, [3, -0.16, 0], [3, 0.266667, 0]], [-0.012314, [3, -0.266667, 0], [3, 0.24, 0]], [0.01223, [3, -0.24, 0], [3, 0.306667, 0]], [0.01223, [3, -0.306667, 0], [3, 0.306667, 0]], [0.01223, [3, -0.306667, 0], [3, 0.306667, 0]], [0.01223, [3, -0.306667, 0], [3, 0.306667, 0]], [0.01223, [3, -0.306667, 0], [3, 0.306667, 0]], [0.01223, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("LWristYaw")
        times.append([0.44, 0.84, 1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[1.10597, [3, -0.16, 0], [3, 0.133333, 0]], [-1.07512, [3, -0.133333, 0.241091], [3, 0.133333, -0.241091]], [-1.31621, [3, -0.133333, 0], [3, 0.24, 0]], [-1.29014, [3, -0.24, 0], [3, 0.306667, 0]], [-1.29014, [3, -0.306667, 0], [3, 0.306667, 0]], [-1.29014, [3, -0.306667, 0], [3, 0.306667, 0]], [-1.29014, [3, -0.306667, 0], [3, 0.306667, 0]], [-1.29014, [3, -0.306667, 0], [3, 0.306667, 0]], [-1.29014, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("RAnklePitch")
        times.append([1.24, 1.96, 2.56, 2.88, 3.48, 3.8, 4.4, 4.72, 5.32, 5.64, 6.56])
        keys.append([[0.105888, [3, -0.426667, 0], [3, 0.24, 0]], [0.0575959, [3, -0.24, 0.0183003], [3, 0.2, -0.0152503]], [0.00523599, [3, -0.2, 0.0144179], [3, 0.106667, -0.00768957]], [-0.00872665, [3, -0.106667, 0], [3, 0.2, 0]], [0.230383, [3, -0.2, -0.112308], [3, 0.106667, 0.0598977]], [0.507891, [3, -0.106667, 0], [3, 0.2, 0]], [0.0453786, [3, -0.2, 0.0523599], [3, 0.106667, -0.0279253]], [0.0174533, [3, -0.106667, 0], [3, 0.2, 0]], [0.0174533, [3, -0.2, 0], [3, 0.106667, 0]], [0.0174533, [3, -0.106667, 0], [3, 0.306667, 0]], [0.090548, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("RAnkleRoll")
        times.append([1.24, 1.96, 2.56, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[-0.148756, [3, -0.426667, 0], [3, 0.24, 0]], [-0.305225, [3, -0.24, 0], [3, 0.2, 0]], [0.00872665, [3, -0.2, -0.0910397], [3, 0.106667, 0.0485545]], [0.113558, [3, -0.106667, -0.023533], [3, 0.306667, 0.0676575]], [0.282298, [3, -0.306667, 0], [3, 0.306667, 0]], [0.1309, [3, -0.306667, 0.0979205], [3, 0.306667, -0.0979205]], [-0.305225, [3, -0.306667, 0], [3, 0.306667, 0]], [0.113558, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("RElbowRoll")
        times.append([1.24, 1.52, 1.76, 1.96, 2.16, 2.44, 2.68, 2.88, 3.08, 3.36, 3.6, 3.8, 4, 4.28, 4.52, 4.72, 4.92, 5.2, 5.44, 5.64, 5.84, 6.12, 6.36, 6.56])
        keys.append([[1.53558, [3, -0.426667, 0], [3, 0.0933333, 0]], [1.02625, [3, -0.0933333, 0], [3, 0.08, 0]], [1.4591, [3, -0.08, 0], [3, 0.0666667, 0]], [0.329852, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.53558, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.02625, [3, -0.0933333, 0], [3, 0.08, 0]], [1.4591, [3, -0.08, 0], [3, 0.0666667, 0]], [0.329852, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.53558, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.02625, [3, -0.0933333, 0], [3, 0.08, 0]], [1.4591, [3, -0.08, 0], [3, 0.0666667, 0]], [0.329852, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.53558, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.02625, [3, -0.0933333, 0], [3, 0.08, 0]], [1.4591, [3, -0.08, 0], [3, 0.0666667, 0]], [0.329852, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.53558, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.02625, [3, -0.0933333, 0], [3, 0.08, 0]], [1.4591, [3, -0.08, 0], [3, 0.0666667, 0]], [0.329852, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.53558, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.02625, [3, -0.0933333, 0], [3, 0.08, 0]], [1.4591, [3, -0.08, 0], [3, 0.0666667, 0]], [0.329852, [3, -0.0666667, 0], [3, 0, 0]]])
        names.append("RElbowYaw")
        times.append([0.6, 1.24, 1.52, 1.96, 2.16, 2.44, 2.88, 3.08, 3.36, 3.8, 4, 4.28, 4.72, 4.92, 5.2, 5.64, 5.84, 6.12, 6.56])
        keys.append([[1.80816, [3, -0.213333, 0], [3, 0.213333, 0]], [0.94797, [3, -0.213333, 0], [3, 0.0933333, 0]], [1.42244, [3, -0.0933333, 0], [3, 0.146667, 0]], [1.20261, [3, -0.146667, 0.108733], [3, 0.0666667, -0.0494243]], [0.94797, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.42244, [3, -0.0933333, 0], [3, 0.146667, 0]], [1.20261, [3, -0.146667, 0.108733], [3, 0.0666667, -0.0494243]], [0.94797, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.42244, [3, -0.0933333, 0], [3, 0.146667, 0]], [1.20261, [3, -0.146667, 0.108733], [3, 0.0666667, -0.0494243]], [0.94797, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.42244, [3, -0.0933333, 0], [3, 0.146667, 0]], [1.20261, [3, -0.146667, 0.108733], [3, 0.0666667, -0.0494243]], [0.94797, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.42244, [3, -0.0933333, 0], [3, 0.146667, 0]], [1.20261, [3, -0.146667, 0.108733], [3, 0.0666667, -0.0494243]], [0.94797, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.42244, [3, -0.0933333, 0], [3, 0.146667, 0]], [1.20261, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RHand")
        times.append([0.6, 1.24, 1.52, 1.76, 1.96, 2.16, 2.44, 2.68, 2.88, 3.08, 3.36, 3.6, 3.8, 4, 4.28, 4.52, 4.72, 4.92, 5.2, 5.44, 5.64, 5.84, 6.12, 6.36, 6.56])
        keys.append([[0.7, [3, -0.213333, 0], [3, 0.213333, 0]], [0, [3, -0.213333, 0], [3, 0.0933333, 0]], [1, [3, -0.0933333, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.0666667, 0]], [0.8, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1, [3, -0.0933333, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.0666667, 0]], [0.8, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1, [3, -0.0933333, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.0666667, 0]], [0.8, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1, [3, -0.0933333, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.0666667, 0]], [0.8, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1, [3, -0.0933333, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.0666667, 0]], [0.8, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1, [3, -0.0933333, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.0666667, 0]], [0.8, [3, -0.0666667, 0], [3, 0, 0]]])
        names.append("RHipPitch")
        times.append([1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[0.236194, [3, -0.426667, 0], [3, 0.24, 0]], [0.325165, [3, -0.24, -0.0278366], [3, 0.306667, 0.0355689]], [0.42641, [3, -0.306667, 0], [3, 0.306667, 0]], [0.056716, [3, -0.306667, 0], [3, 0.306667, 0]], [0.423342, [3, -0.306667, 0], [3, 0.306667, 0]], [0.325165, [3, -0.306667, 0], [3, 0.306667, 0]], [0.42641, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("RHipRoll")
        times.append([1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[0.234743, [3, -0.426667, 0], [3, 0.24, 0]], [0.345191, [3, -0.24, 0], [3, 0.306667, 0]], [-0.191709, [3, -0.306667, 0.119908], [3, 0.306667, -0.119908]], [-0.374254, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.194775, [3, -0.306667, -0.119908], [3, 0.306667, 0.119908]], [0.345191, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.191709, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("RKneePitch")
        times.append([1.24, 1.96, 2.88, 3.8, 4.72, 5.64, 6.56])
        keys.append([[-0.0923279, [3, -0.426667, 0], [3, 0.24, 0]], [-0.0923279, [3, -0.24, 0], [3, 0.306667, 0]], [-0.0923279, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0923279, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0923279, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0923279, [3, -0.306667, 0], [3, 0.306667, 0]], [-0.0923279, [3, -0.306667, 0], [3, 0, 0]]])
        names.append("RShoulderPitch")
        times.append([1.24, 1.52, 1.76, 1.96, 2.16, 2.44, 2.68, 2.88, 3.08, 3.36, 3.6, 3.8, 4, 4.28, 4.52, 4.72, 4.92, 5.2, 5.44, 5.64, 5.84, 6.12, 6.36, 6.56])
        keys.append([[1.28247, [3, -0.426667, 0], [3, 0.0933333, 0]], [1.51146, [3, -0.0933333, -0.0504985], [3, 0.08, 0.0432844]], [1.56381, [3, -0.08, 0], [3, 0.0666667, 0]], [1.38371, [3, -0.0666667, 0.0468915], [3, 0.0666667, -0.0468915]], [1.28247, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.51146, [3, -0.0933333, -0.0504985], [3, 0.08, 0.0432844]], [1.56381, [3, -0.08, 0], [3, 0.0666667, 0]], [1.38371, [3, -0.0666667, 0.0468915], [3, 0.0666667, -0.0468915]], [1.28247, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.51146, [3, -0.0933333, -0.0504985], [3, 0.08, 0.0432844]], [1.56381, [3, -0.08, 0], [3, 0.0666667, 0]], [1.38371, [3, -0.0666667, 0.0468915], [3, 0.0666667, -0.0468915]], [1.28247, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.51146, [3, -0.0933333, -0.0504985], [3, 0.08, 0.0432844]], [1.56381, [3, -0.08, 0], [3, 0.0666667, 0]], [1.38371, [3, -0.0666667, 0.0468915], [3, 0.0666667, -0.0468915]], [1.28247, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.51146, [3, -0.0933333, -0.0504985], [3, 0.08, 0.0432844]], [1.56381, [3, -0.08, 0], [3, 0.0666667, 0]], [1.38371, [3, -0.0666667, 0.0468915], [3, 0.0666667, -0.0468915]], [1.28247, [3, -0.0666667, 0], [3, 0.0933333, 0]], [1.51146, [3, -0.0933333, -0.0504985], [3, 0.08, 0.0432844]], [1.56381, [3, -0.08, 0], [3, 0.0666667, 0]], [1.38371, [3, -0.0666667, 0], [3, 0, 0]]])
        names.append("RShoulderRoll")
        times.append([0.6, 1.24, 1.96, 2.16, 2.88, 3.08, 3.8, 4, 4.72, 4.92, 5.64, 5.84, 6.56])
        keys.append([[0.23911, [3, -0.213333, 0], [3, 0.213333, 0]], [-0.286901, [3, -0.213333, 0], [3, 0.24, 0]], [-0.168782, [3, -0.24, 0], [3, 0.0666667, 0]], [-0.286901, [3, -0.0666667, 0], [3, 0.24, 0]], [-0.168782, [3, -0.24, 0], [3, 0.0666667, 0]], [-0.286901, [3, -0.0666667, 0], [3, 0.24, 0]], [-0.168782, [3, -0.24, 0], [3, 0.0666667, 0]], [-0.286901, [3, -0.0666667, 0], [3, 0.24, 0]], [-0.168782, [3, -0.24, 0], [3, 0.0666667, 0]], [-0.286901, [3, -0.0666667, 0], [3, 0.24, 0]], [-0.168782, [3, -0.24, 0], [3, 0.0666667, 0]], [-0.286901, [3, -0.0666667, 0], [3, 0.24, 0]], [-0.168782, [3, -0.24, 0], [3, 0, 0]]])
        names.append("RWristYaw")
        times.append([0.6, 1.24, 1.76, 1.96, 2.16, 2.68, 2.88, 3.08, 3.6, 3.8, 4, 4.52, 4.72, 4.92, 5.44, 5.64, 5.84, 6.36, 6.56])
        keys.append([[0.98262, [3, -0.213333, 0], [3, 0.213333, 0]], [1.3238, [3, -0.213333, 0], [3, 0.173333, 0]], [1.16937, [3, -0.173333, 0], [3, 0.0666667, 0]], [1.33692, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.3238, [3, -0.0666667, 0.0131214], [3, 0.173333, -0.0341156]], [1.16937, [3, -0.173333, 0], [3, 0.0666667, 0]], [1.33692, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.3238, [3, -0.0666667, 0.0131214], [3, 0.173333, -0.0341156]], [1.16937, [3, -0.173333, 0], [3, 0.0666667, 0]], [1.33692, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.3238, [3, -0.0666667, 0.0131214], [3, 0.173333, -0.0341156]], [1.16937, [3, -0.173333, 0], [3, 0.0666667, 0]], [1.33692, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.3238, [3, -0.0666667, 0.0131214], [3, 0.173333, -0.0341156]], [1.16937, [3, -0.173333, 0], [3, 0.0666667, 0]], [1.33692, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.3238, [3, -0.0666667, 0.0131214], [3, 0.173333, -0.0341156]], [1.16937, [3, -0.173333, 0], [3, 0.0666667, 0]], [1.33692, [3, -0.0666667, 0], [3, 0, 0]]])
        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err
################################################################################################################################################################################################################################################################################################################################################################################################
    def wave(self):
    # Choregraphe bezier export in Python.
        names = list()
        times = list()
        keys = list()
        names.append("HeadPitch")
        times.append([0.56, 0.92, 3.4, 3.96, 4.32, 6.8])
        keys.append([[0.460158, [3, -0.2, 0], [3, 0.12, 0]], [-0.058334, [3, -0.12, 0.0111339], [3, 0.826667, -0.0767001]], [-0.135034, [3, -0.826667, 0], [3, 0.186667, 0]], [0.44175, [3, -0.186667, 0], [3, 0.12, 0]], [-0.058334, [3, -0.12, 0.0111339], [3, 0.826667, -0.0767001]], [-0.135034, [3, -0.826667, 0], [3, 0, 0]]])
        names.append("HeadYaw")
        times.append([0.56, 0.92, 3.4, 3.96, 4.32, 6.8])
        keys.append([[0.0827941, [3, -0.2, 0], [3, 0.12, 0]], [-0.880559, [3, -0.12, 0.017146], [3, 0.826667, -0.118117]], [-0.998676, [3, -0.826667, 0], [3, 0.186667, 0]], [-0.0705221, [3, -0.186667, -0.381294], [3, 0.12, 0.245118]], [0.880559, [3, -0.12, -0.017146], [3, 0.826667, 0.118117]], [0.998676, [3, -0.826667, 0], [3, 0, 0]]])
        names.append("LAnklePitch")
        times.append([0.56, 0.84, 1.12, 1.28, 1.48, 1.64, 1.84, 2, 2.2, 2.36, 2.56, 2.72, 2.92, 3.08, 3.4, 3.96, 4.24, 4.52, 4.68, 4.88, 5.04, 5.24, 5.4, 5.6, 5.76, 5.96, 6.12, 6.32, 6.48, 6.8])
        keys.append([[0.024502, [3, -0.2, 0], [3, 0.0933333, 0]], [-0.038392, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.024502, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.024502, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.038392, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.038392, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.024502, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.024502, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.038392, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.038392, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.024502, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.024502, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.038392, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.038392, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.022968, [3, -0.106667, 0], [3, 0.186667, 0]], [-0.0352401, [3, -0.186667, 0.00630379], [3, 0.0933333, -0.00315189]], [-0.038392, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.024502, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.024502, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.038392, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.038392, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.024502, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.024502, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.038392, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.038392, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.024502, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.024502, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.038392, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.038392, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.0383081, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LAnkleRoll")
        times.append([0.56, 0.84, 1.12, 1.28, 1.48, 1.64, 1.84, 2, 2.2, 2.36, 2.56, 2.72, 2.92, 3.08, 3.4, 3.96, 4.24, 4.52, 4.68, 4.88, 5.04, 5.24, 5.4, 5.6, 5.76, 5.96, 6.12, 6.32, 6.48, 6.8])
        keys.append([[-0.11194, [3, -0.2, 0], [3, 0.0933333, 0]], [-0.138018, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.11194, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.11194, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.138018, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.138018, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.11194, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.11194, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.138018, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.138018, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.11194, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.11194, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.138018, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.138018, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.11194, [3, -0.106667, -0.0050102], [3, 0.186667, 0.00876784]], [-0.0966839, [3, -0.186667, 0], [3, 0.0933333, 0]], [-0.138018, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.11194, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.11194, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.138018, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.138018, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.11194, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.11194, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.138018, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.138018, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.11194, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.11194, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.138018, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.138018, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.0966839, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LElbowRoll")
        times.append([0.24, 0.56, 0.84, 0.92, 1.2, 1.28, 1.56, 1.64, 1.92, 2, 2.28, 2.36, 2.64, 2.72, 3, 3.08, 3.4, 3.96, 4.24, 4.32, 4.6, 4.68, 4.96, 5.04, 5.32, 5.4, 5.68, 5.76, 6.04, 6.12, 6.4, 6.48, 6.8])
        keys.append([[-1.2706, [3, -0.0933333, 0], [3, 0.106667, 0]], [-1.49561, [3, -0.106667, 0], [3, 0.0933333, 0]], [-1.45726, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.45726, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.45572, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.45572, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.45572, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.45572, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.45572, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.45572, [3, -0.0266667, 0], [3, 0.106667, 0]], [-1.54462, [3, -0.106667, 0], [3, 0.186667, 0]], [-1.17662, [3, -0.186667, -0.0582939], [3, 0.0933333, 0.029147]], [-1.14747, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.14747, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.31772, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.31772, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.29852, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.29852, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.22724, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.22724, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.11833, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.11833, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.940383, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.940383, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.638187, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.638187, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.0349066, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LElbowYaw")
        times.append([0.24, 0.56, 0.84, 0.92, 1.2, 1.28, 1.56, 1.64, 1.92, 2, 2.28, 2.36, 2.64, 2.72, 3, 3.08, 3.4, 3.68, 3.96, 4.24, 4.32, 4.6, 4.68, 4.96, 5.04, 5.32, 5.4, 5.68, 5.76, 6.04, 6.12, 6.4, 6.48, 6.8])
        keys.append([[-0.93026, [3, -0.0933333, 0], [3, 0.106667, 0]], [-0.036858, [3, -0.106667, -0.0280504], [3, 0.0933333, 0.0245441]], [-0.012314, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.012314, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.00302603, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.00302603, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.00924597, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.00924597, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.00924597, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.00924597, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.00924597, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.00924597, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.00771196, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.00771196, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.013764, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.013764, [3, -0.0266667, 0], [3, 0.106667, 0]], [0.078192, [3, -0.106667, -0.0644279], [3, 0.0933333, 0.0563744]], [0.567232, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.0750492, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.119694, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.119694, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.010472, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.010472, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.019984, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.019984, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.032256, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.032256, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.046062, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.046062, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.0598679, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.0598679, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.0782759, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.0782759, [3, -0.0266667, 0], [3, 0.106667, 0]], [0.0966839, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LHand")
        times.append([0.56, 0.84, 0.92, 3.4, 3.96, 4.24, 4.32, 6.8])
        keys.append([[0.5932, [3, -0.2, 0], [3, 0.0933333, 0]], [0.5924, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.5924, [3, -0.0266667, 0], [3, 0.826667, 0]], [0.5948, [3, -0.826667, 0], [3, 0.186667, 0]], [0.3084, [3, -0.186667, 0], [3, 0.0933333, 0]], [0.6988, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.6988, [3, -0.0266667, 0], [3, 0.826667, 0]], [0.7936, [3, -0.826667, 0], [3, 0, 0]]])
        names.append("LHipPitch")
        times.append([0.56, 0.84, 1.12, 1.28, 1.48, 1.64, 1.84, 2, 2.2, 2.36, 2.56, 2.72, 2.92, 3.08, 3.4, 3.96, 4.24, 4.52, 4.68, 4.88, 5.04, 5.24, 5.4, 5.6, 5.76, 5.96, 6.12, 6.32, 6.48, 6.8])
        keys.append([[0.161112, [3, -0.2, 0], [3, 0.0933333, 0]], [0.274628, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.161112, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.161112, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.274628, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.274628, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.161112, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.161112, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.274628, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.274628, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.161112, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.161112, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.274628, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.274628, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.159578, [3, -0.106667, 0], [3, 0.186667, 0]], [0.167164, [3, -0.186667, -0.00758608], [3, 0.0933333, 0.00379304]], [0.274628, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.161112, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.161112, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.274628, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.274628, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.161112, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.161112, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.274628, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.274628, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.161112, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.161112, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.274628, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.274628, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.167164, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LHipRoll")
        times.append([0.56, 0.84, 1.12, 1.28, 1.48, 1.64, 1.84, 2, 2.2, 2.36, 2.56, 2.72, 2.92, 3.08, 3.4, 3.96, 4.24, 4.52, 4.68, 4.88, 5.04, 5.24, 5.4, 5.6, 5.76, 5.96, 6.12, 6.32, 6.48, 6.8])
        keys.append([[0.168782, [3, -0.2, 0], [3, 0.0933333, 0]], [0.224006, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.168782, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.168782, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.224006, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.224006, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168782, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168782, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.224006, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.224006, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168782, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168782, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.224006, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.224006, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.168782, [3, -0.106667, 0.00874933], [3, 0.186667, -0.0153113]], [0.151824, [3, -0.186667, 0], [3, 0.0933333, 0]], [0.224006, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.168782, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.168782, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.224006, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.224006, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168782, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168782, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.224006, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.224006, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168782, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168782, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.224006, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.224006, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.153358, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LHipYawPitch")
        times.append([0.56, 0.84, 1.12, 1.28, 1.48, 1.64, 1.84, 2, 2.2, 2.36, 2.56, 2.72, 2.92, 3.08, 3.4, 3.96, 4.24, 4.52, 4.68, 4.88, 5.04, 5.24, 5.4, 5.6, 5.76, 5.96, 6.12, 6.32, 6.48, 6.8])
        keys.append([[-0.492371, [3, -0.2, 0], [3, 0.0933333, 0]], [-0.461692, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.492371, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.492371, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.461692, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.461692, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.492371, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.492371, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.461692, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.461692, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.492371, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.492371, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.461692, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.461692, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.493905, [3, -0.106667, 0], [3, 0.186667, 0]], [-0.492371, [3, -0.186667, -0.00153415], [3, 0.0933333, 0.000767074]], [-0.461692, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.492371, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.492371, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.461692, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.461692, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.492371, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.492371, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.461692, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.461692, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.492371, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.492371, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.461692, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.461692, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.493905, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LKneePitch")
        times.append([0.56, 0.84, 1.12, 1.28, 1.48, 1.64, 1.84, 2, 2.2, 2.36, 2.56, 2.72, 2.92, 3.08, 3.4, 3.96, 4.24, 4.52, 4.68, 4.88, 5.04, 5.24, 5.4, 5.6, 5.76, 5.96, 6.12, 6.32, 6.48, 6.8])
        keys.append([[0.168698, [3, -0.2, 0], [3, 0.0933333, 0]], [0.193243, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.168698, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.193243, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.193243, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.193243, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.193243, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.193243, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.193243, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.170232, [3, -0.106667, 0], [3, 0.186667, 0]], [0.222472, [3, -0.186667, 0], [3, 0.0933333, 0]], [0.193243, [3, -0.0933333, 0.0089623], [3, 0.0933333, -0.0089623]], [0.168698, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.193243, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.193243, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.193243, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.193243, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.193243, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.193243, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.222472, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LShoulderPitch")
        times.append([0.24, 0.56, 0.84, 0.92, 1.2, 1.28, 1.56, 1.64, 1.92, 2, 2.28, 2.36, 2.64, 2.72, 3, 3.08, 3.4, 3.96, 4.24, 4.32, 4.6, 4.68, 4.96, 5.04, 5.32, 5.4, 5.68, 5.76, 6.04, 6.12, 6.4, 6.48, 6.8])
        keys.append([[1.32994, [3, -0.0933333, 0], [3, 0.106667, 0]], [1.13052, [3, -0.106667, 0.0192845], [3, 0.0933333, -0.0168739]], [1.11364, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11364, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.10751, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.10751, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.11518, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11518, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.11518, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11518, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.11518, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11518, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.11211, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11211, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.0937, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.0937, [3, -0.0266667, 0], [3, 0.106667, 0]], [1.01547, [3, -0.106667, 0.0782344], [3, 0.186667, -0.13691]], [-0.417134, [3, -0.186667, 0], [3, 0.0933333, 0]], [-0.314428, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.314428, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.228525, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.228525, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.20398, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.20398, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.171766, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.171766, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.14262, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.14262, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.105804, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.105804, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.061318, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.061318, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.00149204, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LShoulderRoll")
        times.append([0.24, 0.56, 0.84, 0.92, 1.2, 1.28, 1.56, 1.64, 1.92, 2, 2.28, 2.36, 2.64, 2.72, 3, 3.08, 3.4, 3.96, 4.24, 4.32, 4.6, 4.68, 4.96, 5.04, 5.32, 5.4, 5.68, 5.76, 6.04, 6.12, 6.4, 6.48, 6.8])
        keys.append([[0.610865, [3, -0.0933333, 0], [3, 0.106667, 0]], [0.259204, [3, -0.106667, 0.00876654], [3, 0.0933333, -0.00767072]], [0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.251533, [3, -0.0266667, 0], [3, 0.106667, 0]], [0.289883, [3, -0.106667, 0], [3, 0.186667, 0]], [-0.292952, [3, -0.186667, 0], [3, 0.0933333, 0]], [0.01078, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.01078, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.225147, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.225147, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.467748, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.467748, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.68766, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.68766, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.888373, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.888373, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.01578, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.01578, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.07384, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.07384, [3, -0.0266667, 0], [3, 0.106667, 0]], [1.26406, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LWristYaw")
        times.append([0.56, 0.84, 0.92, 3.4, 3.96, 4.24, 4.32, 4.6, 4.68, 6.8])
        keys.append([[-0.492455, [3, -0.2, 0], [3, 0.0933333, 0]], [-0.461776, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.461776, [3, -0.0266667, 0], [3, 0.826667, 0]], [-0.546147, [3, -0.826667, 0], [3, 0.186667, 0]], [-0.530721, [3, -0.186667, -0.0154252], [3, 0.0933333, 0.00771261]], [-0.262272, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.262272, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.122173, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.122173, [3, -0.0266667, 0], [3, 0.706667, 0]], [-0.156426, [3, -0.706667, 0], [3, 0, 0]]])
        names.append("RAnklePitch")
        times.append([0.56, 0.84, 1.12, 1.28, 1.48, 1.64, 1.84, 2, 2.2, 2.36, 2.56, 2.72, 2.92, 3.08, 3.4, 3.96, 4.24, 4.52, 4.68, 4.88, 5.04, 5.24, 5.4, 5.6, 5.76, 5.96, 6.12, 6.32, 6.48, 6.8])
        keys.append([[-0.0383081, [3, -0.2, 0], [3, 0.0933333, 0]], [-0.128814, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.0383081, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.0383081, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.128814, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.128814, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.0383081, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.0383081, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.128814, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.128814, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.0383081, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.0383081, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.128814, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.128814, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.0383081, [3, -0.106667, -0.0187697], [3, 0.186667, 0.032847]], [0.0260361, [3, -0.186667, 0], [3, 0.0933333, 0]], [-0.128814, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.0383081, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.0383081, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.128814, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.128814, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.0383081, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.0383081, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.128814, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.128814, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.0383081, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.0383081, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.128814, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.128814, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.022968, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RAnkleRoll")
        times.append([0.56, 0.84, 1.12, 1.28, 1.48, 1.64, 1.84, 2, 2.2, 2.36, 2.56, 2.72, 2.92, 3.08, 3.4, 3.96, 4.24, 4.52, 4.68, 4.88, 5.04, 5.24, 5.4, 5.6, 5.76, 5.96, 6.12, 6.32, 6.48, 6.8])
        keys.append([[0.0966839, [3, -0.2, 0], [3, 0.0933333, 0]], [0.112024, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.0966839, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.0966839, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.112024, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.112024, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.0966839, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.0966839, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.112024, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.112024, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.0966839, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.0966839, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.112024, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.112024, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.0966839, [3, -0.106667, 0], [3, 0.186667, 0]], [0.11194, [3, -0.186667, -0.000167896], [3, 0.0933333, 8.39478e-05]], [0.112024, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.0966839, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.0966839, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.112024, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.112024, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.0966839, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.0966839, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.112024, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.112024, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.0966839, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.0966839, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.112024, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.112024, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.11194, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RElbowRoll")
        times.append([0.56, 0.84, 0.92, 1.2, 1.28, 1.56, 1.64, 1.92, 2, 2.28, 2.36, 2.64, 2.72, 3, 3.08, 3.4, 3.68, 3.96, 4.24, 4.32, 4.6, 4.68, 4.96, 5.04, 5.32, 5.4, 5.68, 5.76, 6.04, 6.12, 6.4, 6.48, 6.8])
        keys.append([[1.19043, [3, -0.2, 0], [3, 0.0933333, 0]], [1.14747, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.14747, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.31772, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.31772, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.29852, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.29852, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.22724, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.22724, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.11833, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11833, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.940383, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.940383, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.638187, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.638187, [3, -0.0266667, 0], [3, 0.106667, 0]], [0.0349066, [3, -0.106667, 0], [3, 0.0933333, 0]], [1.35612, [3, -0.0933333, -0.131818], [3, 0.0933333, 0.131818]], [1.48794, [3, -0.0933333, 0], [3, 0.0933333, 0]], [1.45726, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.45726, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.45572, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.45572, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.45572, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.45572, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.45572, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.45572, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.45572, [3, -0.0266667, 0], [3, 0.106667, 0]], [1.54462, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RElbowYaw")
        times.append([0.56, 0.84, 0.92, 1.2, 1.28, 1.56, 1.64, 1.92, 2, 2.28, 2.36, 2.64, 2.72, 3, 3.08, 3.4, 3.96, 4.24, 4.32, 4.6, 4.68, 4.96, 5.04, 5.32, 5.4, 5.68, 5.76, 6.04, 6.12, 6.4, 6.48, 6.8])
        keys.append([[-0.342125, [3, -0.2, 0], [3, 0.0933333, 0]], [-0.119694, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.119694, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.010472, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.010472, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.019984, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.019984, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.032256, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.032256, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.046062, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.046062, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.0598679, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.0598679, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.0782759, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.0782759, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.0966839, [3, -0.106667, 0], [3, 0.186667, 0]], [0.0245859, [3, -0.186667, 0], [3, 0.0933333, 0]], [0.012314, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.012314, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.00302603, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.00302603, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.00924597, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.00924597, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.00924597, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.00924597, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.00924597, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.00924597, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.00771196, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.00771196, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.013764, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.013764, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.078192, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RHand")
        times.append([0.56, 0.84, 0.92, 3.4, 3.96, 4.24, 4.32, 6.8])
        keys.append([[0.306, [3, -0.2, 0], [3, 0.0933333, 0]], [0.6988, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.6988, [3, -0.0266667, 0], [3, 0.826667, 0]], [0.7936, [3, -0.826667, 0], [3, 0.186667, 0]], [0.594, [3, -0.186667, 0.00319994], [3, 0.0933333, -0.00159997]], [0.5924, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.5924, [3, -0.0266667, 0], [3, 0.826667, 0]], [0.5948, [3, -0.826667, 0], [3, 0, 0]]])
        names.append("RHipPitch")
        times.append([0.56, 0.84, 1.12, 1.28, 1.48, 1.64, 1.84, 2, 2.2, 2.36, 2.56, 2.72, 2.92, 3.08, 3.4, 3.96, 4.24, 4.52, 4.68, 4.88, 5.04, 5.24, 5.4, 5.6, 5.76, 5.96, 6.12, 6.32, 6.48, 6.8])
        keys.append([[0.168698, [3, -0.2, 0], [3, 0.0933333, 0]], [0.292952, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.168698, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.292952, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.292952, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.292952, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.292952, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.292952, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.292952, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.167164, [3, -0.106667, 0.00345825], [3, 0.186667, -0.00605193]], [0.161112, [3, -0.186667, 0], [3, 0.0933333, 0]], [0.292952, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.168698, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.292952, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.292952, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.292952, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.292952, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.292952, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.292952, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.159578, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RHipRoll")
        times.append([0.56, 0.84, 1.12, 1.28, 1.48, 1.64, 1.84, 2, 2.2, 2.36, 2.56, 2.72, 2.92, 3.08, 3.4, 3.96, 4.24, 4.52, 4.68, 4.88, 5.04, 5.24, 5.4, 5.6, 5.76, 5.96, 6.12, 6.32, 6.48, 6.8])
        keys.append([[-0.153358, [3, -0.2, 0], [3, 0.0933333, 0]], [-0.199378, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.153358, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.153358, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.199378, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.199378, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.153358, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.153358, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.199378, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.199378, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.153358, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.153358, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.199378, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.199378, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.153358, [3, -0.106667, 0], [3, 0.186667, 0]], [-0.168782, [3, -0.186667, 0.0102266], [3, 0.0933333, -0.00511329]], [-0.199378, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.153358, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.153358, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.199378, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.199378, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.153358, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.153358, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.199378, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.199378, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.153358, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.153358, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.199378, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.199378, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.168782, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RKneePitch")
        times.append([0.56, 0.84, 1.12, 1.28, 1.48, 1.64, 1.84, 2, 2.2, 2.36, 2.56, 2.72, 2.92, 3.08, 3.4, 3.96, 4.24, 4.52, 4.68, 4.88, 5.04, 5.24, 5.4, 5.6, 5.76, 5.96, 6.12, 6.32, 6.48, 6.8])
        keys.append([[0.222472, [3, -0.2, 0], [3, 0.0933333, 0]], [0.259288, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.222472, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.222472, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.259288, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.259288, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.222472, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.222472, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.259288, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.259288, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.222472, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.222472, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.259288, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.259288, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.222472, [3, -0.106667, 0.0109806], [3, 0.186667, -0.019216]], [0.168698, [3, -0.186667, 0], [3, 0.0933333, 0]], [0.259288, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.222472, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.222472, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.259288, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.259288, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.222472, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.222472, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.259288, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.259288, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.222472, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.222472, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.259288, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.259288, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.170232, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RShoulderPitch")
        times.append([0.56, 0.84, 0.92, 1.2, 1.28, 1.56, 1.64, 1.92, 2, 2.28, 2.36, 2.64, 2.72, 3, 3.08, 3.4, 3.96, 4.24, 4.32, 4.6, 4.68, 4.96, 5.04, 5.32, 5.4, 5.68, 5.76, 6.04, 6.12, 6.4, 6.48, 6.8])
        keys.append([[-0.37272, [3, -0.2, 0], [3, 0.0933333, 0]], [-0.314428, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.314428, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.228525, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.228525, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.20398, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.20398, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.171766, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.171766, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.14262, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.14262, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.105804, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.105804, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.061318, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.061318, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.00149204, [3, -0.106667, -0.0598259], [3, 0.186667, 0.104695]], [1.12745, [3, -0.186667, 0], [3, 0.0933333, 0]], [1.11364, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11364, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.10751, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.10751, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.11518, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11518, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.11518, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11518, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.11518, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11518, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.11211, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11211, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.0937, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.0937, [3, -0.0266667, 0], [3, 0.106667, 0]], [1.01547, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RShoulderRoll")
        times.append([0.56, 0.84, 0.92, 1.2, 1.28, 1.56, 1.64, 1.92, 2, 2.28, 2.36, 2.64, 2.72, 3, 3.08, 3.4, 3.96, 4.24, 4.32, 4.6, 4.68, 4.96, 5.04, 5.32, 5.4, 5.68, 5.76, 6.04, 6.12, 6.4, 6.48, 6.8])
        keys.append([[0.314159, [3, -0.2, 0], [3, 0.0933333, 0]], [-0.01078, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.01078, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.225147, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.225147, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.467748, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.467748, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.68766, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.68766, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.888373, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.888373, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.01578, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.01578, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.07384, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.07384, [3, -0.0266667, 0], [3, 0.106667, 0]], [-1.26406, [3, -0.106667, 0], [3, 0.186667, 0]], [-0.283749, [3, -0.186667, -0.0644306], [3, 0.0933333, 0.0322153]], [-0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.251533, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.251533, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.251533, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.289883, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RWristYaw")
        times.append([0.56, 0.84, 0.92, 1.2, 1.28, 3.4, 3.96, 4.24, 4.32, 6.8])
        keys.append([[0.549129, [3, -0.2, 0], [3, 0.0933333, 0]], [0.262272, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.262272, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.122173, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.122173, [3, -0.0266667, 0], [3, 0.706667, 0]], [0.156426, [3, -0.706667, -0.034253], [3, 0.186667, 0.00904795]], [0.515466, [3, -0.186667, 0], [3, 0.0933333, 0]], [0.461776, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.461776, [3, -0.0266667, 0], [3, 0.826667, 0]], [0.546147, [3, -0.826667, 0], [3, 0, 0]]])
        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err

    def exp(self):
        # Choregraphe bezier export in Python.
        names = list()
        times = list()
        keys = list()
        names.append("HeadPitch")
        times.append([1.04, 1.4, 3.88])
        keys.append([[0.446352, [3, -0.36, 0], [3, 0.12, 0]], [-0.020944, [3, -0.12, 0.00430702], [3, 0.826667, -0.0296706]], [-0.0506146, [3, -0.826667, 0], [3, 0, 0]]])
        names.append("HeadYaw")
        times.append([1.04, 3.88])
        keys.append([[0.00149204, [3, -0.36, 0], [3, 0.946667, 0]], [0.00609404, [3, -0.946667, 0], [3, 0, 0]]])
        names.append("LAnklePitch")
        times.append([1.04, 1.32, 1.6, 1.76, 1.96, 2.12, 2.32, 2.48, 2.68, 2.84, 3.04, 3.2, 3.4, 3.56, 3.88])
        keys.append([[-0.0353239, [3, -0.36, 0], [3, 0.0933333, 0]], [-0.038392, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.024502, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.024502, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.038392, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.038392, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.024502, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.024502, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.038392, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.038392, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.024502, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.024502, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.038392, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.038392, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.022968, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LAnkleRoll")
        times.append([1.04, 1.32, 1.6, 1.76, 1.96, 2.12, 2.32, 2.48, 2.68, 2.84, 3.04, 3.2, 3.4, 3.56, 3.88])
        keys.append([[-0.0966, [3, -0.36, 0], [3, 0.0933333, 0]], [-0.138018, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.11194, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.11194, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.138018, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.138018, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.11194, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.11194, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.138018, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.138018, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.11194, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.11194, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.138018, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.138018, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.11194, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LElbowRoll")
        times.append([0.56, 1.04, 1.32, 1.4, 1.68, 1.76, 2.04, 2.12, 2.4, 2.48, 2.76, 2.84, 3.12, 3.2, 3.48, 3.56, 3.88])
        keys.append([[-0.619592, [3, -0.2, 0], [3, 0.16, 0]], [-1.11824, [3, -0.16, 0.0501068], [3, 0.0933333, -0.029229]], [-1.14747, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.14747, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.31772, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.31772, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.29852, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.29852, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.22724, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.22724, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.11833, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.11833, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.940383, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.940383, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.638187, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.638187, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.0349066, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LElbowYaw")
        times.append([0.56, 1.04, 1.32, 1.4, 1.68, 1.76, 2.04, 2.12, 2.4, 2.48, 2.76, 2.84, 3.12, 3.2, 3.48, 3.56, 3.88])
        keys.append([[-1.2514, [3, -0.2, 0], [3, 0.16, 0]], [-0.047596, [3, -0.16, -0.286783], [3, 0.0933333, 0.16729]], [0.119694, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.119694, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.010472, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.010472, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.019984, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.019984, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.032256, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.032256, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.046062, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.046062, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.0598679, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.0598679, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.0782759, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.0782759, [3, -0.0266667, 0], [3, 0.106667, 0]], [0.0966839, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LHand")
        times.append([0.56, 1.04, 1.32, 1.4, 3.88])
        keys.append([[0.9, [3, -0.2, 0], [3, 0.16, 0]], [0.3104, [3, -0.16, 0], [3, 0.0933333, 0]], [0.6988, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.6988, [3, -0.0266667, 0], [3, 0.826667, 0]], [0.7936, [3, -0.826667, 0], [3, 0, 0]]])
        names.append("LHipPitch")
        times.append([1.04, 1.32, 1.6, 1.76, 1.96, 2.12, 2.32, 2.48, 2.68, 2.84, 3.04, 3.2, 3.4, 3.56, 3.88])
        keys.append([[0.167248, [3, -0.36, 0], [3, 0.0933333, 0]], [0.274628, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.161112, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.161112, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.274628, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.274628, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.161112, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.161112, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.274628, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.274628, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.161112, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.161112, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.274628, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.274628, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.159578, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LHipRoll")
        times.append([1.04, 1.32, 1.6, 1.76, 1.96, 2.12, 2.32, 2.48, 2.68, 2.84, 3.04, 3.2, 3.4, 3.56, 3.88])
        keys.append([[0.151908, [3, -0.36, 0], [3, 0.0933333, 0]], [0.224006, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.168782, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.168782, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.224006, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.224006, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168782, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168782, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.224006, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.224006, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168782, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168782, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.224006, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.224006, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.168782, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LHipYawPitch")
        times.append([1.04, 1.32, 1.6, 1.76, 1.96, 2.12, 2.32, 2.48, 2.68, 2.84, 3.04, 3.2, 3.4, 3.56, 3.88])
        keys.append([[-0.492371, [3, -0.36, 0], [3, 0.0933333, 0]], [-0.461692, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.492371, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.492371, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.461692, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.461692, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.492371, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.492371, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.461692, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.461692, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.492371, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.492371, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.461692, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.461692, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.493905, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LKneePitch")
        times.append([1.04, 1.32, 1.6, 1.76, 1.96, 2.12, 2.32, 2.48, 2.68, 2.84, 3.04, 3.2, 3.4, 3.56, 3.88])
        keys.append([[0.223922, [3, -0.36, 0], [3, 0.0933333, 0]], [0.193243, [3, -0.0933333, 0.00920402], [3, 0.0933333, -0.00920402]], [0.168698, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.193243, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.193243, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.193243, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.193243, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.193243, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.193243, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.170232, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LShoulderPitch")
        times.append([0.56, 1.04, 1.32, 1.4, 1.68, 1.76, 2.04, 2.12, 2.4, 2.48, 2.76, 2.84, 3.12, 3.2, 3.48, 3.56, 3.88])
        keys.append([[0.260054, [3, -0.2, 0], [3, 0.16, 0]], [-0.406552, [3, -0.16, 0.15278], [3, 0.0933333, -0.0891218]], [-0.495674, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.495674, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.390954, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.390954, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.20398, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.20398, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.171766, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.171766, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.14262, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.14262, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.105804, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.105804, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.061318, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.061318, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.00149204, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LShoulderRoll")
        times.append([0.56, 1.04, 1.32, 1.4, 1.68, 1.76, 2.04, 2.12, 2.4, 2.48, 2.76, 2.84, 3.12, 3.2, 3.48, 3.56, 3.88])
        keys.append([[0.989602, [3, -0.2, 0], [3, 0.16, 0]], [-0.271559, [3, -0.16, 0], [3, 0.0933333, 0]], [0.01078, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.01078, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.225147, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.225147, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.467748, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.467748, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.68766, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.68766, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.888373, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.888373, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.01578, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.01578, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.07384, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.07384, [3, -0.0266667, 0], [3, 0.106667, 0]], [1.26406, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LWristYaw")
        times.append([0.56, 1.04, 1.32, 1.4, 1.68, 1.76, 3.88])
        keys.append([[-1.59872, [3, -0.2, 0], [3, 0.16, 0]], [-0.575292, [3, -0.16, -0.281358], [3, 0.0933333, 0.164125]], [-0.262272, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.262272, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.122173, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.122173, [3, -0.0266667, 0], [3, 0.706667, 0]], [-0.156426, [3, -0.706667, 0], [3, 0, 0]]])
        names.append("RAnklePitch")
        times.append([1.04, 1.32, 1.6, 1.76, 1.96, 2.12, 2.32, 2.48, 2.68, 2.84, 3.04, 3.2, 3.4, 3.56, 3.88])
        keys.append([[0.0261199, [3, -0.36, 0], [3, 0.0933333, 0]], [-0.128814, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.0383081, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.0383081, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.128814, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.128814, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.0383081, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.0383081, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.128814, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.128814, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.0383081, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.0383081, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.128814, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.128814, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.0383081, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RAnkleRoll")
        times.append([1.04, 1.32, 1.6, 1.76, 1.96, 2.12, 2.32, 2.48, 2.68, 2.84, 3.04, 3.2, 3.4, 3.56, 3.88])
        keys.append([[0.112024, [3, -0.36, 0], [3, 0.0933333, 0]], [0.112024, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.0966839, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.0966839, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.112024, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.112024, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.0966839, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.0966839, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.112024, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.112024, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.0966839, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.0966839, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.112024, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.112024, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.0966839, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RElbowRoll")
        times.append([0.56, 1.04, 1.32, 1.4, 1.68, 1.76, 2.04, 2.12, 2.4, 2.48, 2.76, 2.84, 3.12, 3.2, 3.48, 3.56, 3.88])
        keys.append([[0.572468, [3, -0.2, 0], [3, 0.16, 0]], [1.54462, [3, -0.16, 0], [3, 0.0933333, 0]], [1.14747, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.14747, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.31772, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.31772, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.29852, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.29852, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.22724, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.22724, [3, -0.0266667, 0], [3, 0.0933333, 0]], [1.11833, [3, -0.0933333, 0], [3, 0.0266667, 0]], [1.11833, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.940383, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.940383, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.638187, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.638187, [3, -0.0266667, 0], [3, 0.106667, 0]], [0.0349066, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RElbowYaw")
        times.append([0.56, 1.04, 1.32, 1.4, 1.68, 1.76, 2.04, 2.12, 2.4, 2.48, 2.76, 2.84, 3.12, 3.2, 3.48, 3.56, 3.88])
        keys.append([[1.16588, [3, -0.2, 0], [3, 0.16, 0]], [-4.19617e-05, [3, -0.16, 0.205118], [3, 0.0933333, -0.119652]], [-0.119694, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.119694, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.010472, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.010472, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.019984, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.019984, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.032256, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.032256, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.046062, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.046062, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.0598679, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.0598679, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.0782759, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.0782759, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.0966839, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RHand")
        times.append([0.56, 1.04, 1.32, 1.4, 3.88])
        keys.append([[0.8, [3, -0.2, 0], [3, 0.16, 0]], [0.5936, [3, -0.16, 0], [3, 0.0933333, 0]], [0.6988, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.6988, [3, -0.0266667, 0], [3, 0.826667, 0]], [0.7936, [3, -0.826667, 0], [3, 0, 0]]])
        names.append("RHipPitch")
        times.append([1.04, 1.32, 1.6, 1.76, 1.96, 2.12, 2.32, 2.48, 2.68, 2.84, 3.04, 3.2, 3.4, 3.56, 3.88])
        keys.append([[0.161028, [3, -0.36, 0], [3, 0.0933333, 0]], [0.292952, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.168698, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.292952, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.292952, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.292952, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.292952, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.168698, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.168698, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.292952, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.292952, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.167164, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RHipRoll")
        times.append([1.04, 1.32, 1.6, 1.76, 1.96, 2.12, 2.32, 2.48, 2.68, 2.84, 3.04, 3.2, 3.4, 3.56, 3.88])
        keys.append([[-0.167164, [3, -0.36, 0], [3, 0.0933333, 0]], [-0.199378, [3, -0.0933333, 0], [3, 0.0933333, 0]], [-0.153358, [3, -0.0933333, 0], [3, 0.0533333, 0]], [-0.153358, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.199378, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.199378, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.153358, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.153358, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.199378, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.199378, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.153358, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.153358, [3, -0.0533333, 0], [3, 0.0666667, 0]], [-0.199378, [3, -0.0666667, 0], [3, 0.0533333, 0]], [-0.199378, [3, -0.0533333, 0], [3, 0.106667, 0]], [-0.153358, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RKneePitch")
        times.append([1.04, 1.32, 1.6, 1.76, 1.96, 2.12, 2.32, 2.48, 2.68, 2.84, 3.04, 3.2, 3.4, 3.56, 3.88])
        keys.append([[0.168782, [3, -0.36, 0], [3, 0.0933333, 0]], [0.259288, [3, -0.0933333, 0], [3, 0.0933333, 0]], [0.222472, [3, -0.0933333, 0], [3, 0.0533333, 0]], [0.222472, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.259288, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.259288, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.222472, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.222472, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.259288, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.259288, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.222472, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.222472, [3, -0.0533333, 0], [3, 0.0666667, 0]], [0.259288, [3, -0.0666667, 0], [3, 0.0533333, 0]], [0.259288, [3, -0.0533333, 0], [3, 0.106667, 0]], [0.222472, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RShoulderPitch")
        times.append([0.56, 1.04, 1.32, 1.4, 1.68, 1.76, 2.04, 2.12, 2.4, 2.48, 2.76, 2.84, 3.12, 3.2, 3.48, 3.56, 3.88])
        keys.append([[0.286234, [3, -0.2, 0], [3, 0.16, 0]], [0.245482, [3, -0.16, 0.0407517], [3, 0.0933333, -0.0237718]], [0, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.0523599, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.0523599, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.20398, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.20398, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.171766, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.171766, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.14262, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.14262, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.105804, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.105804, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.061318, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.061318, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.00149204, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RShoulderRoll")
        times.append([0.56, 1.04, 1.32, 1.4, 1.68, 1.76, 2.04, 2.12, 2.4, 2.48, 2.76, 2.84, 3.12, 3.2, 3.48, 3.56, 3.88])
        keys.append([[-0.998328, [3, -0.2, 0], [3, 0.16, 0]], [0.141086, [3, -0.16, 0], [3, 0.0933333, 0]], [-0.01078, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.01078, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.225147, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.225147, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.467748, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.467748, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.68766, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.68766, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-0.888373, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-0.888373, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.01578, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.01578, [3, -0.0266667, 0], [3, 0.0933333, 0]], [-1.07384, [3, -0.0933333, 0], [3, 0.0266667, 0]], [-1.07384, [3, -0.0266667, 0], [3, 0.106667, 0]], [-1.26406, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RWristYaw")
        times.append([0.56, 1.04, 1.32, 1.4, 1.68, 1.76, 3.88])
        keys.append([[1.07512, [3, -0.2, 0], [3, 0.16, 0]], [0.269941, [3, -0.16, 0.0131468], [3, 0.0933333, -0.00766899]], [0.262272, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.262272, [3, -0.0266667, 0], [3, 0.0933333, 0]], [0.122173, [3, -0.0933333, 0], [3, 0.0266667, 0]], [0.122173, [3, -0.0266667, 0], [3, 0.706667, 0]], [0.156426, [3, -0.706667, 0], [3, 0, 0]]])
        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err

    def Disco2(self):
        # Choregraphe bezier export in Python.
        names = list()
        times = list()
        keys = list()
        names.append("HeadPitch")
        times.append([0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[-0.144238, [3, -0.146667, 0], [3, 0.226667, 0]], [-0.107422, [3, -0.226667, 0], [3, 0.226667, 0]], [-0.17185, [3, -0.226667, 0], [3, 0.253333, 0]], [-0.130432, [3, -0.253333, 0], [3, 0.16, 0]], [-0.17185, [3, -0.16, 0], [3, 0.173333, 0]], [-0.130432, [3, -0.173333, -0.00664731], [3, 0.28, 0.010738]], [-0.119694, [3, -0.28, 0], [3, 0.04, 0]], [-0.14884, [3, -0.04, 0], [3, 0.306667, 0]], [-0.119694, [3, -0.306667, 0], [3, 0.04, 0]], [-0.14884, [3, -0.04, 0], [3, 0.146667, 0]], [-0.136536, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("HeadYaw")
        times.append([0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[-0.113558, [3, -0.146667, 0], [3, 0.226667, 0]], [0.0275701, [3, -0.226667, 0], [3, 0.226667, 0]], [-0.0982179, [3, -0.226667, 0], [3, 0.253333, 0]], [0.0183661, [3, -0.253333, 0], [3, 0.16, 0]], [-0.0982179, [3, -0.16, 0], [3, 0.173333, 0]], [0.0183661, [3, -0.173333, 0], [3, 0.28, 0]], [-0.023052, [3, -0.28, 0], [3, 0.04, 0]], [-0.00617796, [3, -0.04, 0], [3, 0.306667, 0]], [-0.023052, [3, -0.306667, 0], [3, 0.04, 0]], [-0.00617796, [3, -0.04, 0], [3, 0.146667, 0]], [-0.014923, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LAnklePitch")
        times.append([0, 0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[-0.046062, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.0444441, [3, -0.133333, -0.0255667], [3, 0.226667, 0.0434634]], [0.161028, [3, -0.226667, 0], [3, 0.226667, 0]], [0.05058, [3, -0.226667, 0], [3, 0.253333, 0]], [0.161028, [3, -0.253333, 0], [3, 0.16, 0]], [0.05058, [3, -0.16, 0], [3, 0.173333, 0]], [0.161028, [3, -0.173333, 0], [3, 0.28, 0]], [0.0367741, [3, -0.28, 0.0107378], [3, 0.04, -0.00153397]], [0.0352401, [3, -0.04, 0], [3, 0.306667, 0]], [0.0367741, [3, -0.306667, 0], [3, 0.04, 0]], [0.0352401, [3, -0.04, 0], [3, 0.146667, 0]], [0.0764751, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LAnkleRoll")
        times.append([0, 0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[-0.0183661, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.062936, [3, -0.133333, 0], [3, 0.226667, 0]], [-0.248467, [3, -0.226667, 0], [3, 0.226667, 0]], [0.07214, [3, -0.226667, 0], [3, 0.253333, 0]], [-0.248467, [3, -0.253333, 0], [3, 0.16, 0]], [0.07214, [3, -0.16, 0], [3, 0.173333, 0]], [-0.248467, [3, -0.173333, 0], [3, 0.28, 0]], [-0.11194, [3, -0.28, 0], [3, 0.04, 0]], [-0.11194, [3, -0.04, 0], [3, 0.306667, 0]], [-0.11194, [3, -0.306667, 0], [3, 0.04, 0]], [-0.11194, [3, -0.04, 0], [3, 0.146667, 0]], [-0.0958187, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LElbowRoll")
        times.append([0, 0.4, 0.48, 1.08, 1.76, 1.84, 2.52, 3, 3.52, 3.92, 4, 4.36, 4.48, 4.92, 5, 5.4, 5.52, 5.96])
        keys.append([[-1.12923, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.369652, [3, -0.133333, 0], [3, 0.0266667, 0]], [-0.369652, [3, -0.0266667, 0], [3, 0.2, 0]], [-0.202446, [3, -0.2, 0], [3, 0.226667, 0]], [-0.398797, [3, -0.226667, 0], [3, 0.0266667, 0]], [-0.369652, [3, -0.0266667, -0.00581305], [3, 0.226667, 0.0494109]], [-0.233125, [3, -0.226667, 0], [3, 0.16, 0]], [-0.398797, [3, -0.16, 0], [3, 0.173333, 0]], [-0.233125, [3, -0.173333, 0], [3, 0.133333, 0]], [-1.2514, [3, -0.133333, 0], [3, 0.0266667, 0]], [-1.2514, [3, -0.0266667, 0], [3, 0.12, 0]], [-0.052114, [3, -0.12, 0], [3, 0.04, 0]], [-0.075124, [3, -0.04, 0.0230101], [3, 0.146667, -0.0843703]], [-1.02625, [3, -0.146667, 0], [3, 0.0266667, 0]], [-1.02625, [3, -0.0266667, 0], [3, 0.133333, 0]], [-0.052114, [3, -0.133333, 0], [3, 0.04, 0]], [-0.075124, [3, -0.04, 0.0230101], [3, 0.146667, -0.0843703]], [-0.503112, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LElbowYaw")
        times.append([0, 0.4, 0.48, 1.08, 1.76, 1.84, 2.52, 3, 3.52, 3.92, 4, 4.36, 4.48, 4.92, 5, 5.4, 5.52, 5.96])
        keys.append([[-1.76453, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.380475, [3, -0.133333, 0], [3, 0.0266667, 0]], [-0.380475, [3, -0.0266667, 0], [3, 0.2, 0]], [-0.618244, [3, -0.2, 0], [3, 0.226667, 0]], [-0.385075, [3, -0.226667, -0.0391058], [3, 0.0266667, 0.00460068]], [-0.380475, [3, -0.0266667, 0], [3, 0.226667, 0]], [-0.612108, [3, -0.226667, 0], [3, 0.16, 0]], [-0.385075, [3, -0.16, 0], [3, 0.173333, 0]], [-1.61443, [3, -0.173333, 0], [3, 0.133333, 0]], [-0.438078, [3, -0.133333, 0], [3, 0.0266667, 0]], [-0.438078, [3, -0.0266667, 0], [3, 0.12, 0]], [-0.205598, [3, -0.12, 0], [3, 0.04, 0]], [-0.214801, [3, -0.04, 0.00920314], [3, 0.146667, -0.0337448]], [-1.23046, [3, -0.146667, 0], [3, 0.0266667, 0]], [-1.23046, [3, -0.0266667, 0], [3, 0.133333, 0]], [-0.205598, [3, -0.133333, 0], [3, 0.04, 0]], [-0.214801, [3, -0.04, 0.00920314], [3, 0.146667, -0.0337448]], [-1.19724, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LHand")
        times.append([0, 0.4, 0.48, 1.08, 1.76, 1.84, 2.52, 3, 3.52, 3.92, 4, 4.36, 4.48, 4.92, 5, 5.4, 5.52, 5.96])
        keys.append([[0.6, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.2648, [3, -0.133333, 0], [3, 0.0266667, 0]], [0.2648, [3, -0.0266667, 0], [3, 0.2, 0]], [0.264, [3, -0.2, 0], [3, 0.226667, 0]], [0.264, [3, -0.226667, 0], [3, 0.0266667, 0]], [0.2648, [3, -0.0266667, 0], [3, 0.226667, 0]], [0.264, [3, -0.226667, 0], [3, 0.16, 0]], [0.264, [3, -0.16, 0], [3, 0.173333, 0]], [0.264, [3, -0.173333, 0], [3, 0.133333, 0]], [0.8, [3, -0.133333, 0], [3, 0.0266667, 0]], [0.8, [3, -0.0266667, 0], [3, 0.12, 0]], [0.9836, [3, -0.12, 0], [3, 0.04, 0]], [0.982, [3, -0.04, 0.00160003], [3, 0.146667, -0.00586677]], [0.8, [3, -0.146667, 0], [3, 0.0266667, 0]], [0.8, [3, -0.0266667, 0], [3, 0.133333, 0]], [0.9836, [3, -0.133333, 0], [3, 0.04, 0]], [0.982, [3, -0.04, 0.00160003], [3, 0.146667, -0.00586677]], [0.312197, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LHipPitch")
        times.append([0, 0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[-0.153358, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.185656, [3, -0.133333, 0], [3, 0.226667, 0]], [0.147306, [3, -0.226667, 0], [3, 0.226667, 0]], [0.331386, [3, -0.226667, 0], [3, 0.253333, 0]], [0.147306, [3, -0.253333, 0], [3, 0.16, 0]], [0.331386, [3, -0.16, 0], [3, 0.173333, 0]], [0.147306, [3, -0.173333, 0], [3, 0.28, 0]], [0.328317, [3, -0.28, 0], [3, 0.04, 0]], [0.328317, [3, -0.04, 0], [3, 0.306667, 0]], [0.328317, [3, -0.306667, 0], [3, 0.04, 0]], [0.328317, [3, -0.04, 0], [3, 0.146667, 0]], [0.15824, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LHipRoll")
        times.append([0, 0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[0.00464395, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.144154, [3, -0.133333, 0], [3, 0.226667, 0]], [0.329852, [3, -0.226667, 0], [3, 0.226667, 0]], [-0.11961, [3, -0.226667, 0], [3, 0.253333, 0]], [0.329852, [3, -0.253333, 0], [3, 0.16, 0]], [-0.11961, [3, -0.16, 0], [3, 0.173333, 0]], [0.329852, [3, -0.173333, 0], [3, 0.28, 0]], [0.142704, [3, -0.28, 0], [3, 0.04, 0]], [0.142704, [3, -0.04, 0], [3, 0.306667, 0]], [0.142704, [3, -0.306667, 0], [3, 0.04, 0]], [0.142704, [3, -0.04, 0], [3, 0.146667, 0]], [0.0969995, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LHipYawPitch")
        times.append([0, 0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[-0.443284, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.37272, [3, -0.133333, -0.00902336], [3, 0.226667, 0.0153397]], [-0.357381, [3, -0.226667, -0.00357938], [3, 0.226667, 0.00357938]], [-0.351244, [3, -0.226667, 0], [3, 0.253333, 0]], [-0.357381, [3, -0.253333, 0], [3, 0.16, 0]], [-0.351244, [3, -0.16, 0], [3, 0.173333, 0]], [-0.357381, [3, -0.173333, 0], [3, 0.28, 0]], [-0.328234, [3, -0.28, 0], [3, 0.04, 0]], [-0.328234, [3, -0.04, 0], [3, 0.306667, 0]], [-0.328234, [3, -0.306667, 0], [3, 0.04, 0]], [-0.328234, [3, -0.04, 0], [3, 0.146667, 0]], [-0.161593, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LKneePitch")
        times.append([0, 0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[0.404934, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.090548, [3, -0.133333, 0], [3, 0.226667, 0]], [-0.0798099, [3, -0.226667, 0], [3, 0.226667, 0]], [-0.090548, [3, -0.226667, 0], [3, 0.253333, 0]], [-0.0798099, [3, -0.253333, 0], [3, 0.16, 0]], [-0.090548, [3, -0.16, 0], [3, 0.173333, 0]], [-0.0798099, [3, -0.173333, 0], [3, 0.28, 0]], [-0.090548, [3, -0.28, 0], [3, 0.04, 0]], [-0.090548, [3, -0.04, 0], [3, 0.306667, 0]], [-0.090548, [3, -0.306667, 0], [3, 0.04, 0]], [-0.090548, [3, -0.04, 0], [3, 0.146667, 0]], [-0.0856063, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LShoulderPitch")
        times.append([0.4, 0.48, 1.08, 1.76, 1.84, 2.52, 3, 3.52, 3.92, 4, 4.36, 4.48, 4.92, 5, 5.4, 5.52, 5.96])
        keys.append([[1.74718, [3, -0.146667, 0], [3, 0.0266667, 0]], [1.74718, [3, -0.0266667, 0], [3, 0.2, 0]], [1.85611, [3, -0.2, 0], [3, 0.226667, 0]], [1.73184, [3, -0.226667, 0], [3, 0.0266667, 0]], [1.74718, [3, -0.0266667, -0.00322953], [3, 0.226667, 0.027451]], [1.82389, [3, -0.226667, 0], [3, 0.16, 0]], [1.73184, [3, -0.16, 0], [3, 0.173333, 0]], [1.82389, [3, -0.173333, 0], [3, 0.133333, 0]], [0.286234, [3, -0.133333, 0], [3, 0.0266667, 0]], [0.286234, [3, -0.0266667, 0], [3, 0.12, 0]], [-0.0261199, [3, -0.12, 0], [3, 0.04, 0]], [0.049046, [3, -0.04, 0], [3, 0.146667, 0]], [-0.364774, [3, -0.146667, 0], [3, 0.0266667, 0]], [-0.364774, [3, -0.0266667, 0], [3, 0.133333, 0]], [-0.0261199, [3, -0.133333, -0.106108], [3, 0.04, 0.0318323]], [0.049046, [3, -0.04, -0.0751659], [3, 0.146667, 0.275608]], [1.47202, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LShoulderRoll")
        times.append([0.4, 0.48, 1.08, 1.76, 1.84, 2.52, 3, 3.52, 3.92, 4, 4.36, 4.48, 4.92, 5, 5.4, 5.52, 5.96])
        keys.append([[0.24233, [3, -0.146667, 0], [3, 0.0266667, 0]], [0.24233, [3, -0.0266667, 0], [3, 0.2, 0]], [0.196309, [3, -0.2, 0], [3, 0.226667, 0]], [0.210117, [3, -0.226667, -0.0137255], [3, 0.0266667, 0.00161477]], [0.24233, [3, -0.0266667, 0], [3, 0.226667, 0]], [0.207048, [3, -0.226667, 0], [3, 0.16, 0]], [0.210117, [3, -0.16, 0], [3, 0.173333, 0]], [0.207048, [3, -0.173333, 0], [3, 0.133333, 0]], [0.568977, [3, -0.133333, 0], [3, 0.0266667, 0]], [0.568977, [3, -0.0266667, 0], [3, 0.12, 0]], [-0.04913, [3, -0.12, 0], [3, 0.04, 0]], [-0.023052, [3, -0.04, -0.026078], [3, 0.146667, 0.0956194]], [0.342085, [3, -0.146667, 0], [3, 0.0266667, 0]], [0.342085, [3, -0.0266667, 0], [3, 0.133333, 0]], [-0.04913, [3, -0.133333, 0], [3, 0.04, 0]], [-0.023052, [3, -0.04, -0.0185179], [3, 0.146667, 0.0678989]], [0.21012, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("LWristYaw")
        times.append([0, 0.4, 0.48, 1.08, 1.76, 1.84, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[-1.45037, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.395814, [3, -0.133333, 0], [3, 0.0266667, 0]], [-0.395814, [3, -0.0266667, 0], [3, 0.2, 0]], [-0.420357, [3, -0.2, 0], [3, 0.226667, 0]], [-0.366667, [3, -0.226667, 0], [3, 0.0266667, 0]], [-0.395814, [3, -0.0266667, 0], [3, 0.226667, 0]], [-0.391212, [3, -0.226667, -0.00460241], [3, 0.16, 0.00324876]], [-0.366667, [3, -0.16, 0], [3, 0.173333, 0]], [-0.391212, [3, -0.173333, 0], [3, 0.28, 0]], [0.0827941, [3, -0.28, -0.0859035], [3, 0.04, 0.0122719]], [0.095066, [3, -0.04, 0], [3, 0.306667, 0]], [0.0827941, [3, -0.306667, 0], [3, 0.04, 0]], [0.095066, [3, -0.04, -0.00191264], [3, 0.146667, 0.00701303]], [0.109571, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RAnklePitch")
        times.append([0, 0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[-0.052114, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.092082, [3, -0.133333, 0], [3, 0.226667, 0]], [0.082878, [3, -0.226667, 0], [3, 0.226667, 0]], [0.0859459, [3, -0.226667, 0], [3, 0.253333, 0]], [0.082878, [3, -0.253333, 0], [3, 0.16, 0]], [0.0859459, [3, -0.16, 0], [3, 0.173333, 0]], [0.082878, [3, -0.173333, 0.00306794], [3, 0.28, -0.0049559]], [0.029188, [3, -0.28, 0.0107378], [3, 0.04, -0.00153397]], [0.027654, [3, -0.04, 0], [3, 0.306667, 0]], [0.029188, [3, -0.306667, 0], [3, 0.04, 0]], [0.027654, [3, -0.04, 0], [3, 0.146667, 0]], [0.0829044, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RAnkleRoll")
        times.append([0, 0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[0.0966839, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.26389, [3, -0.133333, 0], [3, 0.226667, 0]], [-0.0904641, [3, -0.226667, 0], [3, 0.226667, 0]], [0.251617, [3, -0.226667, 0], [3, 0.253333, 0]], [-0.0904641, [3, -0.253333, 0], [3, 0.16, 0]], [0.251617, [3, -0.16, 0], [3, 0.173333, 0]], [-0.0904641, [3, -0.173333, 0], [3, 0.28, 0]], [0.084412, [3, -0.28, 0], [3, 0.04, 0]], [0.084412, [3, -0.04, 0], [3, 0.306667, 0]], [0.084412, [3, -0.306667, 0], [3, 0.04, 0]], [0.084412, [3, -0.04, 0], [3, 0.146667, 0]], [0.106355, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RElbowRoll")
        times.append([0, 0.4, 0.48, 0.8, 1.08, 1.4, 1.76, 1.84, 2.2, 2.52, 2.76, 3, 3.28, 3.52, 3.92, 4, 4.36, 4.48, 4.92, 5, 5.4, 5.52, 5.96])
        keys.append([[1.1205, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.138102, [3, -0.133333, 0], [3, 0.0266667, 0]], [0.138102, [3, -0.0266667, 0], [3, 0.106667, 0]], [1.309, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.257754, [3, -0.0933333, 0], [3, 0.106667, 0]], [1.4591, [3, -0.106667, 0], [3, 0.12, 0]], [0.165714, [3, -0.12, 0.124254], [3, 0.0266667, -0.027612]], [0.138102, [3, -0.0266667, 0], [3, 0.12, 0]], [1.309, [3, -0.12, 0], [3, 0.106667, 0]], [0.230143, [3, -0.106667, 0], [3, 0.08, 0]], [1.4591, [3, -0.08, 0], [3, 0.08, 0]], [0.165714, [3, -0.08, 0], [3, 0.0933333, 0]], [1.309, [3, -0.0933333, 0], [3, 0.08, 0]], [0.230143, [3, -0.08, 0], [3, 0.133333, 0]], [1.51669, [3, -0.133333, 0], [3, 0.0266667, 0]], [1.51669, [3, -0.0266667, 0], [3, 0.12, 0]], [0.055266, [3, -0.12, 0], [3, 0.04, 0]], [0.081344, [3, -0.04, -0.026078], [3, 0.146667, 0.0956194]], [1.12923, [3, -0.146667, 0], [3, 0.0266667, 0]], [1.12923, [3, -0.0266667, 0], [3, 0.133333, 0]], [0.055266, [3, -0.133333, 0], [3, 0.04, 0]], [0.081344, [3, -0.04, -0.026078], [3, 0.146667, 0.0956194]], [0.460254, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RElbowYaw")
        times.append([0, 0.4, 0.48, 0.8, 1.08, 1.4, 1.76, 1.84, 2.2, 2.52, 2.76, 3, 3.28, 3.52, 3.92, 4, 4.36, 4.48, 4.92, 5, 5.4, 5.52, 5.96])
        keys.append([[0.567232, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.851412, [3, -0.133333, 0], [3, 0.0266667, 0]], [-0.851412, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.0750492, [3, -0.106667, -0.0839694], [3, 0.0933333, 0.0734732]], [-0.00157596, [3, -0.0933333, 0], [3, 0.106667, 0]], [-0.460767, [3, -0.106667, 0.132345], [3, 0.12, -0.148888]], [-0.845275, [3, -0.12, 0.0276146], [3, 0.0266667, -0.00613659]], [-0.851412, [3, -0.0266667, 0], [3, 0.12, 0]], [-0.0750492, [3, -0.12, -0.0723029], [3, 0.106667, 0.0642692]], [-0.01078, [3, -0.106667, 0], [3, 0.08, 0]], [-0.460767, [3, -0.08, 0.139083], [3, 0.08, -0.139083]], [-0.845275, [3, -0.08, 0], [3, 0.0933333, 0]], [-0.0750492, [3, -0.0933333, -0.0749807], [3, 0.08, 0.0642692]], [-0.01078, [3, -0.08, -0.0642692], [3, 0.133333, 0.107115]], [0.523599, [3, -0.133333, 0], [3, 0.0266667, 0]], [0.523599, [3, -0.0266667, 0], [3, 0.12, 0]], [-0.0429939, [3, -0.12, 0], [3, 0.04, 0]], [-0.0353239, [3, -0.04, -0.00767002], [3, 0.146667, 0.0281234]], [0.865683, [3, -0.146667, 0], [3, 0.0266667, 0]], [0.865683, [3, -0.0266667, 0], [3, 0.133333, 0]], [-0.0429939, [3, -0.133333, 0], [3, 0.04, 0]], [-0.0353239, [3, -0.04, -0.00767002], [3, 0.146667, 0.0281234]], [1.2554, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RHand")
        times.append([0, 0.4, 0.48, 0.8, 1.08, 1.4, 1.76, 1.84, 2.2, 2.52, 2.76, 3, 3.28, 3.52, 3.92, 4, 4.36, 4.48, 4.92, 5, 5.4, 5.52, 5.96])
        keys.append([[0.5, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.678, [3, -0.133333, 0], [3, 0.0266667, 0]], [0.678, [3, -0.0266667, 0], [3, 0.106667, 0]], [0.3, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.6784, [3, -0.0933333, 0], [3, 0.106667, 0]], [0.3, [3, -0.106667, 0], [3, 0.12, 0]], [0.6768, [3, -0.12, -0.00539982], [3, 0.0266667, 0.00119996]], [0.678, [3, -0.0266667, 0], [3, 0.12, 0]], [0.3, [3, -0.12, 0], [3, 0.106667, 0]], [0.6776, [3, -0.106667, 0], [3, 0.08, 0]], [0.3, [3, -0.08, 0], [3, 0.08, 0]], [0.6768, [3, -0.08, 0], [3, 0.0933333, 0]], [0.3, [3, -0.0933333, 0], [3, 0.08, 0]], [0.6776, [3, -0.08, -0.0625], [3, 0.133333, 0.104167]], [0.8, [3, -0.133333, 0], [3, 0.0266667, 0]], [0.8, [3, -0.0266667, 0], [3, 0.12, 0]], [0.9108, [3, -0.12, 0], [3, 0.04, 0]], [0.908, [3, -0.04, 0.00279999], [3, 0.146667, -0.0102666]], [0.8, [3, -0.146667, 0], [3, 0.0266667, 0]], [0.8, [3, -0.0266667, 0], [3, 0.133333, 0]], [0.9108, [3, -0.133333, 0], [3, 0.04, 0]], [0.908, [3, -0.04, 0.00279999], [3, 0.146667, -0.0102666]], [0.352357, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RHipPitch")
        times.append([0, 0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[-0.177985, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.101202, [3, -0.133333, -0.053974], [3, 0.226667, 0.0917558]], [0.259204, [3, -0.226667, -0.0138055], [3, 0.226667, 0.0138055]], [0.27301, [3, -0.226667, 0], [3, 0.253333, 0]], [0.259204, [3, -0.253333, 0], [3, 0.16, 0]], [0.27301, [3, -0.16, 0], [3, 0.173333, 0]], [0.259204, [3, -0.173333, 0], [3, 0.28, 0]], [0.345107, [3, -0.28, 0], [3, 0.04, 0]], [0.345107, [3, -0.04, 0], [3, 0.306667, 0]], [0.345107, [3, -0.306667, 0], [3, 0.04, 0]], [0.345107, [3, -0.04, 0], [3, 0.146667, 0]], [0.142653, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RHipRoll")
        times.append([0, 0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[-0.11961, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.297554, [3, -0.133333, 0], [3, 0.226667, 0]], [0.14117, [3, -0.226667, 0], [3, 0.226667, 0]], [-0.351244, [3, -0.226667, 0], [3, 0.253333, 0]], [0.14117, [3, -0.253333, 0], [3, 0.16, 0]], [-0.351244, [3, -0.16, 0], [3, 0.173333, 0]], [0.14117, [3, -0.173333, 0], [3, 0.28, 0]], [-0.107338, [3, -0.28, 0], [3, 0.04, 0]], [-0.107338, [3, -0.04, 0], [3, 0.306667, 0]], [-0.107338, [3, -0.306667, 0], [3, 0.04, 0]], [-0.107338, [3, -0.04, 0], [3, 0.146667, 0]], [-0.117168, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RHipYawPitch")
        times.append([0.4, 5.96])
        keys.append([[-0.37272, [3, -0.146667, 0], [3, 1.85333, 0]], [-0.161593, [3, -1.85333, 0], [3, 0, 0]]])
        names.append("RKneePitch")
        times.append([0, 0.4, 1.08, 1.76, 2.52, 3, 3.52, 4.36, 4.48, 5.4, 5.52, 5.96])
        keys.append([[0.426494, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.0904641, [3, -0.133333, 0], [3, 0.226667, 0]], [-0.0904641, [3, -0.226667, 0], [3, 0.226667, 0]], [-0.091998, [3, -0.226667, 0], [3, 0.253333, 0]], [-0.0904641, [3, -0.253333, 0], [3, 0.16, 0]], [-0.091998, [3, -0.16, 0], [3, 0.173333, 0]], [-0.0904641, [3, -0.173333, 0], [3, 0.28, 0]], [-0.0923279, [3, -0.28, 0], [3, 0.04, 0]], [-0.0923279, [3, -0.04, 0], [3, 0.306667, 0]], [-0.0923279, [3, -0.306667, 0], [3, 0.04, 0]], [-0.0923279, [3, -0.04, 0], [3, 0.146667, 0]], [-0.0853082, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RShoulderPitch")
        times.append([0.4, 0.48, 1.08, 1.76, 1.84, 2.52, 3, 3.52, 3.92, 4, 4.36, 4.48, 4.92, 5, 5.4, 5.52, 5.96])
        keys.append([[-1.19188, [3, -0.146667, 0], [3, 0.0266667, 0]], [-1.19188, [3, -0.0266667, 0], [3, 0.2, 0]], [0.995607, [3, -0.2, 0], [3, 0.226667, 0]], [-1.15506, [3, -0.226667, 0.312935], [3, 0.0266667, -0.0368159]], [-1.19188, [3, -0.0266667, 0], [3, 0.226667, 0]], [1.00481, [3, -0.226667, 0], [3, 0.16, 0]], [-1.15506, [3, -0.16, 0], [3, 0.173333, 0]], [1.00481, [3, -0.173333, 0], [3, 0.133333, 0]], [0.390954, [3, -0.133333, 0], [3, 0.0266667, 0]], [0.390954, [3, -0.0266667, 0], [3, 0.12, 0]], [-0.0536481, [3, -0.12, 0], [3, 0.04, 0]], [0.021518, [3, -0.04, 0], [3, 0.146667, 0]], [-0.390954, [3, -0.146667, 0], [3, 0.0266667, 0]], [-0.390954, [3, -0.0266667, 0], [3, 0.133333, 0]], [-0.0536481, [3, -0.133333, -0.105762], [3, 0.04, 0.0317286]], [0.021518, [3, -0.04, -0.0751661], [3, 0.146667, 0.275609]], [1.45752, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RShoulderRoll")
        times.append([0, 0.4, 0.48, 0.8, 1.08, 1.4, 1.76, 1.84, 2.2, 2.52, 2.76, 3, 3.28, 3.52, 3.92, 4, 4.36, 4.48, 4.92, 5, 5.4, 5.52, 5.96])
        keys.append([[-0.670206, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.328317, [3, -0.133333, 0], [3, 0.0266667, 0]], [-0.328317, [3, -0.0266667, 0], [3, 0.106667, 0]], [-0.595157, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.314159, [3, -0.0933333, 0], [3, 0.106667, 0]], [-0.595157, [3, -0.106667, 0], [3, 0.12, 0]], [-0.331386, [3, -0.12, -0.0138073], [3, 0.0266667, 0.00306829]], [-0.328317, [3, -0.0266667, 0], [3, 0.12, 0]], [-0.595157, [3, -0.12, 0], [3, 0.106667, 0]], [0.276078, [3, -0.106667, 0], [3, 0.08, 0]], [-0.595157, [3, -0.08, 0], [3, 0.08, 0]], [-0.331386, [3, -0.08, 0], [3, 0.0933333, 0]], [-0.595157, [3, -0.0933333, 0], [3, 0.08, 0]], [0.276078, [3, -0.08, 0], [3, 0.133333, 0]], [-0.670206, [3, -0.133333, 0], [3, 0.0266667, 0]], [-0.670206, [3, -0.0266667, 0], [3, 0.12, 0]], [-0.0890139, [3, -0.12, 0], [3, 0.04, 0]], [-0.105888, [3, -0.04, 0.016874], [3, 0.146667, -0.0618714]], [-0.359538, [3, -0.146667, 0], [3, 0.0266667, 0]], [-0.359538, [3, -0.0266667, 0], [3, 0.133333, 0]], [-0.0890139, [3, -0.133333, 0], [3, 0.04, 0]], [-0.105888, [3, -0.04, 0.00790382], [3, 0.146667, -0.0289807]], [-0.199667, [3, -0.146667, 0], [3, 0, 0]]])
        names.append("RWristYaw")
        times.append([0, 0.4, 0.48, 1.08, 1.76, 1.84, 2.52, 3, 3.52, 3.92, 4, 4.36, 4.48, 4.92, 5, 5.4, 5.52, 5.96])
        keys.append([[1.39277, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.107338, [3, -0.133333, 0], [3, 0.0266667, 0]], [0.107338, [3, -0.0266667, 0], [3, 0.2, 0]], [0.400331, [3, -0.2, 0], [3, 0.226667, 0]], [0.115008, [3, -0.226667, 0.0651952], [3, 0.0266667, -0.00767002]], [0.107338, [3, -0.0266667, 0], [3, 0.226667, 0]], [0.392662, [3, -0.226667, 0], [3, 0.16, 0]], [0.115008, [3, -0.16, 0], [3, 0.173333, 0]], [0.392662, [3, -0.173333, 0], [3, 0.133333, 0]], [0.158825, [3, -0.133333, 0], [3, 0.0266667, 0]], [0.158825, [3, -0.0266667, 0], [3, 0.12, 0]], [0.013764, [3, -0.12, 0], [3, 0.04, 0]], [0.022968, [3, -0.04, -0.00920398], [3, 0.146667, 0.0337479]], [0.158825, [3, -0.146667, 0], [3, 0.0266667, 0]], [0.158825, [3, -0.0266667, 0], [3, 0.133333, 0]], [0.013764, [3, -0.133333, 0], [3, 0.04, 0]], [0.022968, [3, -0.04, -0.00862312], [3, 0.146667, 0.0316181]], [0.134488, [3, -0.146667, 0], [3, 0, 0]]])
        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err

    def fist(self):
        # Choregraphe bezier export in Python.
        names = list()
        times = list()
        keys = list()
        names.append("HeadPitch")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[0.0872665, [3, -0.333333, 0], [3, 0.16, 0]], [-0.349066, [3, -0.16, 0], [3, 0.173333, 0]], [0.0872665, [3, -0.173333, 0], [3, 0.16, 0]], [-0.349066, [3, -0.16, 0], [3, 0.173333, 0]], [0.0872665, [3, -0.173333, 0], [3, 0.16, 0]], [-0.349066, [3, -0.16, 0], [3, 0.173333, 0]], [0.0872665, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.349066, [3, -0.173333, 0], [3, 0.36, 0]], [-0.177255, [3, -0.36, 0], [3, 0, 0]]])
        names.append("HeadYaw")
        times.append([1.44, 2.44, 3.44, 4.48, 5.56])
        keys.append([[0, [3, -0.493333, 0], [3, 0.333333, 0]], [0, [3, -0.333333, 0], [3, 0.333333, 0]], [0, [3, -0.333333, 0], [3, 0.346667, 0]], [0, [3, -0.346667, 0], [3, 0.36, 0]], [-0.00367428, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LAnklePitch")
        times.append([1.44, 2.44, 3.44, 4.48, 5.56])
        keys.append([[0.0866825, [3, -0.493333, 0], [3, 0.333333, 0]], [0.0866825, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0866825, [3, -0.333333, 0], [3, 0.346667, 0]], [0.0866825, [3, -0.346667, 0], [3, 0.36, 0]], [0.0806126, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LAnkleRoll")
        times.append([1.44, 2.44, 3.44, 4.48, 5.56])
        keys.append([[-0.102616, [3, -0.493333, 0], [3, 0.333333, 0]], [-0.102616, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.105742, [3, -0.333333, 0], [3, 0.346667, 0]], [-0.105742, [3, -0.346667, 0], [3, 0.36, 0]], [-0.106852, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LElbowRoll")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[-0.0663225, [3, -0.333333, 0], [3, 0.16, 0]], [-0.0432081, [3, -0.16, -0.00502655], [3, 0.173333, 0.00544543]], [-0.0349066, [3, -0.173333, 0], [3, 0.16, 0]], [-0.0432035, [3, -0.16, 0.00829695], [3, 0.173333, -0.00898836]], [-1.54462, [3, -0.173333, 0], [3, 0.16, 0]], [-0.0383972, [3, -0.16, 0], [3, 0.173333, 0]], [-1.54462, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.261843, [3, -0.173333, 0], [3, 0.36, 0]], [-0.420681, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LElbowYaw")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[-0.521853, [3, -0.333333, 0], [3, 0.16, 0]], [-0.52604, [3, -0.16, 0], [3, 0.173333, 0]], [-0.521853, [3, -0.173333, -0.00367294], [3, 0.16, 0.00339041]], [-0.50485, [3, -0.16, 0], [3, 0.173333, 0]], [-1.54636, [3, -0.173333, 0], [3, 0.16, 0]], [-1.40709, [3, -0.16, 0], [3, 0.173333, 0]], [-1.54636, [3, -0.173333, 0], [3, 0.173333, 0]], [-1.45644, [3, -0.173333, -0.0371788], [3, 0.36, 0.0772175]], [-1.20317, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LHand")
        times.append([0.96, 1.44, 1.96, 2.44, 3.44, 4.48, 5.56])
        keys.append([[0, [3, -0.333333, 0], [3, 0.16, 0]], [0, [3, -0.16, 0], [3, 0.173333, 0]], [0, [3, -0.173333, 0], [3, 0.16, 0]], [0.00250534, [3, -0.16, 0], [3, 0.333333, 0]], [0, [3, -0.333333, 0], [3, 0.346667, 0]], [0.00984604, [3, -0.346667, -0.00984604], [3, 0.36, 0.0102247]], [0.3, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LHipPitch")
        times.append([1.44, 2.44, 3.44, 4.48, 5.56])
        keys.append([[0.123171, [3, -0.493333, 0], [3, 0.333333, 0]], [0.123171, [3, -0.333333, 0], [3, 0.333333, 0]], [0.123172, [3, -0.333333, 0], [3, 0.346667, 0]], [0.123172, [3, -0.346667, 0], [3, 0.36, 0]], [0.125733, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LHipRoll")
        times.append([1.44, 2.44, 3.44, 4.48, 5.56])
        keys.append([[0.112188, [3, -0.493333, 0], [3, 0.333333, 0]], [0.112188, [3, -0.333333, 0], [3, 0.333333, 0]], [0.112183, [3, -0.333333, 0], [3, 0.346667, 0]], [0.112183, [3, -0.346667, 0], [3, 0.36, 0]], [0.109581, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LHipYawPitch")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[-0.126371, [3, -0.333333, 0], [3, 0.16, 0]], [-0.216442, [3, -0.16, 0], [3, 0.173333, 0]], [-0.145423, [3, -0.173333, 0], [3, 0.16, 0]], [-0.262185, [3, -0.16, 0], [3, 0.173333, 0]], [-0.112562, [3, -0.173333, 0], [3, 0.16, 0]], [-0.29203, [3, -0.16, 0], [3, 0.173333, 0]], [-0.163523, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.252137, [3, -0.173333, 0], [3, 0.36, 0]], [-0.173337, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LKneePitch")
        times.append([1.44, 2.44, 3.44, 4.48, 5.56])
        keys.append([[-0.0872551, [3, -0.493333, 0], [3, 0.333333, 0]], [-0.0872551, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0872551, [3, -0.333333, 0], [3, 0.346667, 0]], [-0.0872551, [3, -0.346667, 0], [3, 0.36, 0]], [-0.0830429, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LShoulderPitch")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[0.287979, [3, -0.333333, 0], [3, 0.16, 0]], [0.230383, [3, -0.16, 0], [3, 0.173333, 0]], [0.287979, [3, -0.173333, 0], [3, 0.16, 0]], [0.230057, [3, -0.16, 0], [3, 0.173333, 0]], [0.912807, [3, -0.173333, 0], [3, 0.16, 0]], [-0.0523599, [3, -0.16, 0], [3, 0.173333, 0]], [0.912807, [3, -0.173333, 0], [3, 0.173333, 0]], [0.651643, [3, -0.173333, 0], [3, 0.36, 0]], [1.43703, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LShoulderRoll")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[-0.139626, [3, -0.333333, 0], [3, 0.16, 0]], [-0.224985, [3, -0.16, 0], [3, 0.173333, 0]], [-0.139626, [3, -0.173333, 0], [3, 0.16, 0]], [-0.21892, [3, -0.16, 0], [3, 0.173333, 0]], [0.0366519, [3, -0.173333, 0], [3, 0.16, 0]], [-0.305527, [3, -0.16, 0], [3, 0.173333, 0]], [0.0366519, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.281033, [3, -0.173333, 0], [3, 0.36, 0]], [0.221261, [3, -0.36, 0], [3, 0, 0]]])
        names.append("LWristYaw")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[0.588176, [3, -0.333333, 0], [3, 0.16, 0]], [0.587438, [3, -0.16, 0], [3, 0.173333, 0]], [0.588176, [3, -0.173333, 0], [3, 0.16, 0]], [0.584392, [3, -0.16, 0.00378389], [3, 0.173333, -0.00409921]], [-1.1781, [3, -0.173333, 0], [3, 0.16, 0]], [1.09158, [3, -0.16, 0], [3, 0.173333, 0]], [-1.1781, [3, -0.173333, 0], [3, 0.173333, 0]], [1.50344, [3, -0.173333, 0], [3, 0.36, 0]], [0.101113, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RAnklePitch")
        times.append([1.44, 2.44, 3.44, 4.48, 5.56])
        keys.append([[0.0866825, [3, -0.493333, 0], [3, 0.333333, 0]], [0.0866825, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0866825, [3, -0.333333, 0], [3, 0.346667, 0]], [0.0866825, [3, -0.346667, 0], [3, 0.36, 0]], [0.0787795, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RAnkleRoll")
        times.append([1.44, 2.44, 2.96, 3.44, 4.48, 5.56])
        keys.append([[0.105742, [3, -0.493333, 0], [3, 0.333333, 0]], [0.105742, [3, -0.333333, 0], [3, 0.173333, 0]], [0.0872665, [3, -0.173333, 0], [3, 0.16, 0]], [0.102616, [3, -0.16, 0], [3, 0.346667, 0]], [0.102616, [3, -0.346667, 0], [3, 0.36, 0]], [0.10102, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RElbowRoll")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[1.54462, [3, -0.333333, 0], [3, 0.16, 0]], [0.0383972, [3, -0.16, 0], [3, 0.173333, 0]], [1.54462, [3, -0.173333, 0], [3, 0.16, 0]], [0.261843, [3, -0.16, 0.20948], [3, 0.173333, -0.226936]], [0.0349066, [3, -0.173333, 0], [3, 0.16, 0]], [0.0432081, [3, -0.16, 0], [3, 0.173333, 0]], [0.0349066, [3, -0.173333, 0], [3, 0.173333, 0]], [0.0432035, [3, -0.173333, -0.00829695], [3, 0.36, 0.0172321]], [0.415611, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RElbowYaw")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[1.54636, [3, -0.333333, 0], [3, 0.16, 0]], [1.40709, [3, -0.16, 0], [3, 0.173333, 0]], [1.54636, [3, -0.173333, 0], [3, 0.16, 0]], [1.45644, [3, -0.16, 0.0899246], [3, 0.173333, -0.0974183]], [0.521853, [3, -0.173333, 0], [3, 0.16, 0]], [0.52604, [3, -0.16, 0], [3, 0.173333, 0]], [0.521853, [3, -0.173333, 0.00353167], [3, 0.173333, -0.00353167]], [0.50485, [3, -0.173333, 0], [3, 0.36, 0]], [1.19598, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RHand")
        times.append([0.96, 1.44, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[0, [3, -0.333333, 0], [3, 0.16, 0]], [0, [3, -0.16, 0], [3, 0.333333, 0]], [0.00984604, [3, -0.333333, 0], [3, 0.173333, 0]], [0, [3, -0.173333, 0], [3, 0.16, 0]], [0, [3, -0.16, 0], [3, 0.173333, 0]], [0, [3, -0.173333, 0], [3, 0.173333, 0]], [0.00250534, [3, -0.173333, -0.00250534], [3, 0.36, 0.0052034]], [0.3, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RHipPitch")
        times.append([1.44, 2.44, 3.44, 4.48, 5.56])
        keys.append([[0.123172, [3, -0.493333, 0], [3, 0.333333, 0]], [0.123172, [3, -0.333333, 0], [3, 0.333333, 0]], [0.123171, [3, -0.333333, 0], [3, 0.346667, 0]], [0.123171, [3, -0.346667, 0], [3, 0.36, 0]], [0.127247, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RHipRoll")
        times.append([1.44, 2.44, 3.44, 4.48, 5.56])
        keys.append([[-0.112183, [3, -0.493333, 0], [3, 0.333333, 0]], [-0.112183, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.112188, [3, -0.333333, 0], [3, 0.346667, 0]], [-0.112188, [3, -0.346667, 0], [3, 0.36, 0]], [-0.109595, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RHipYawPitch")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[-0.126371, [3, -0.333333, 0], [3, 0.16, 0]], [-0.216442, [3, -0.16, 0], [3, 0.173333, 0]], [-0.145423, [3, -0.173333, 0], [3, 0.16, 0]], [-0.262185, [3, -0.16, 0], [3, 0.173333, 0]], [-0.112562, [3, -0.173333, 0], [3, 0.16, 0]], [-0.29203, [3, -0.16, 0], [3, 0.173333, 0]], [-0.163523, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.252137, [3, -0.173333, 0], [3, 0.36, 0]], [-0.173337, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RKneePitch")
        times.append([1.44, 2.44, 3.44, 4.48, 5.56])
        keys.append([[-0.0872551, [3, -0.493333, 0], [3, 0.333333, 0]], [-0.0872551, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0872551, [3, -0.333333, 0], [3, 0.346667, 0]], [-0.0872551, [3, -0.346667, 0], [3, 0.36, 0]], [-0.0869268, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RShoulderPitch")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[0.912807, [3, -0.333333, 0], [3, 0.16, 0]], [-0.0523599, [3, -0.16, 0], [3, 0.173333, 0]], [0.912807, [3, -0.173333, 0], [3, 0.16, 0]], [0.651643, [3, -0.16, 0.0999725], [3, 0.173333, -0.108303]], [0.287979, [3, -0.173333, 0.0623955], [3, 0.16, -0.0575959]], [0.230383, [3, -0.16, 0], [3, 0.173333, 0]], [0.287979, [3, -0.173333, 0], [3, 0.173333, 0]], [0.230057, [3, -0.173333, 0], [3, 0.36, 0]], [1.4376, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RShoulderRoll")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[-0.0366519, [3, -0.333333, 0], [3, 0.16, 0]], [0.305527, [3, -0.16, 0], [3, 0.173333, 0]], [-0.0366519, [3, -0.173333, 0], [3, 0.16, 0]], [0.281033, [3, -0.16, 0], [3, 0.173333, 0]], [0.139626, [3, -0.173333, 0], [3, 0.16, 0]], [0.224985, [3, -0.16, 0], [3, 0.173333, 0]], [0.139626, [3, -0.173333, 0], [3, 0.173333, 0]], [0.21892, [3, -0.173333, 0], [3, 0.36, 0]], [-0.216046, [3, -0.36, 0], [3, 0, 0]]])
        names.append("RWristYaw")
        times.append([0.96, 1.44, 1.96, 2.44, 2.96, 3.44, 3.96, 4.48, 5.56])
        keys.append([[1.1781, [3, -0.333333, 0], [3, 0.16, 0]], [-1.09158, [3, -0.16, 0], [3, 0.173333, 0]], [1.1781, [3, -0.173333, 0], [3, 0.16, 0]], [-1.50344, [3, -0.16, 0], [3, 0.173333, 0]], [-0.588176, [3, -0.173333, -0.000799819], [3, 0.16, 0.000738295]], [-0.587438, [3, -0.16, 0], [3, 0.173333, 0]], [-0.588176, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.584392, [3, -0.173333, -0.00378389], [3, 0.36, 0.00785884]], [0.0989295, [3, -0.36, 0], [3, 0, 0]]])
        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err
##################################################################################################################################################################################################################################################################################################################################################################################################################################
    def hide(self):
        # Choregraphe bezier export in Python.
        names = list()
        times = list()
        keys = list()
        names.append("HeadPitch")
        times.append([0.96, 1.96, 2.96, 4.96])
        keys.append([[-0.160616, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0872665, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.349066, [3, -0.333333, 0], [3, 0.666667, 0]], [-0.349066, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("HeadYaw")
        times.append([0.96, 1.96, 2.96, 4.96])
        keys.append([[0, [3, -0.333333, 0], [3, 0.333333, 0]], [0, [3, -0.333333, 0], [3, 0.333333, 0]], [0, [3, -0.333333, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("LAnklePitch")
        times.append([0.96, 2.96, 4.96])
        keys.append([[0.0866825, [3, -0.333333, 0], [3, 0.666667, 0]], [0.0866825, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0866825, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("LAnkleRoll")
        times.append([0.96, 2.96, 4.96])
        keys.append([[-0.102616, [3, -0.333333, 0], [3, 0.666667, 0]], [-0.102616, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.102616, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("LElbowRoll")
        times.append([0.96, 1.96, 2.96, 3.96, 4.96])
        keys.append([[-0.4249, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.54462, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.54462, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.54462, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.54309, [3, -0.333333, 0], [3, 0, 0]]])
        names.append("LElbowYaw")
        times.append([0.96, 1.96, 2.96, 3.96, 4.96])
        keys.append([[-1.20864, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.19031, [3, -0.333333, -0.0183208], [3, 0.333333, 0.0183208]], [-0.174533, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.19031, [3, -0.333333, 0.308059], [3, 0.333333, -0.308059]], [-2.02289, [3, -0.333333, 0], [3, 0, 0]]])
        names.append("LHand")
        times.append([0.96, 2.96, 4.96])
        keys.append([[0.307763, [3, -0.333333, 0], [3, 0.666667, 0]], [1, [3, -0.666667, 0], [3, 0.666667, 0]], [0.478009, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("LHipPitch")
        times.append([0.96, 2.96, 4.96])
        keys.append([[0.123171, [3, -0.333333, 0], [3, 0.666667, 0]], [0.123171, [3, -0.666667, 0], [3, 0.666667, 0]], [0.123171, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("LHipRoll")
        times.append([0.96, 2.96, 4.96])
        keys.append([[0.11865, [3, -0.333333, 0], [3, 0.666667, 0]], [0.11865, [3, -0.666667, 0], [3, 0.666667, 0]], [0.112188, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("LHipYawPitch")
        times.append([0.96, 2.96, 4.96])
        keys.append([[-0.170194, [3, -0.333333, 0], [3, 0.666667, 0]], [-0.170194, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.170695, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("LKneePitch")
        times.append([0.96, 2.96, 4.96])
        keys.append([[-0.0872551, [3, -0.333333, 0], [3, 0.666667, 0]], [-0.0872551, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.0872551, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("LShoulderPitch")
        times.append([0.96, 1.96, 2.96, 3.96, 4.96])
        keys.append([[1.43298, [3, -0.333333, 0], [3, 0.333333, 0]], [0.457276, [3, -0.333333, 0], [3, 0.333333, 0]], [0.968658, [3, -0.333333, 0], [3, 0.333333, 0]], [0.457276, [3, -0.333333, 0], [3, 0.333333, 0]], [0.968689, [3, -0.333333, 0], [3, 0, 0]]])
        names.append("LShoulderRoll")
        times.append([0.96, 1.96, 2.96, 3.96, 4.96])
        keys.append([[0.217049, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.314159, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.314159, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.314159, [3, -0.333333, 0], [3, 0.333333, 0]], [0.928599, [3, -0.333333, 0], [3, 0, 0]]])
        names.append("LWristYaw")
        times.append([0.96, 1.96, 2.96, 3.96, 4.96])
        keys.append([[0.100732, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.04196, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.491235, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.04196, [3, -0.333333, 0.221984], [3, 0.333333, -0.221984]], [-1.82314, [3, -0.333333, 0], [3, 0, 0]]])
        names.append("RAnklePitch")
        times.append([0.96, 2.96, 4.96])
        keys.append([[0.0866825, [3, -0.333333, 0], [3, 0.666667, 0]], [0.0866825, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0866825, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("RAnkleRoll")
        times.append([0.96, 2.96, 4.96])
        keys.append([[0.105742, [3, -0.333333, 0], [3, 0.666667, 0]], [0.105742, [3, -0.666667, 0], [3, 0.666667, 0]], [0.105742, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("RElbowRoll")
        times.append([0.96, 1.96, 2.96, 3.96, 4.96])
        keys.append([[0.415757, [3, -0.333333, 0], [3, 0.333333, 0]], [1.54462, [3, -0.333333, 0], [3, 0.333333, 0]], [1.54462, [3, -0.333333, 0], [3, 0.333333, 0]], [1.54462, [3, -0.333333, 0], [3, 0.333333, 0]], [1.34004, [3, -0.333333, 0], [3, 0, 0]]])
        names.append("RElbowYaw")
        times.append([0.96, 1.96, 2.96, 3.96, 4.96])
        keys.append([[1.2087, [3, -0.333333, 0], [3, 0.333333, 0]], [1.13097, [3, -0.333333, 0], [3, 0.333333, 0]], [2.02807, [3, -0.333333, 0], [3, 0.333333, 0]], [1.13097, [3, -0.333333, 0.310471], [3, 0.333333, -0.310471]], [0.165244, [3, -0.333333, 0], [3, 0, 0]]])
        names.append("RHand")
        times.append([0.96, 2.96, 4.96])
        keys.append([[0.307833, [3, -0.333333, 0], [3, 0.666667, 0]], [0.47, [3, -0.666667, -0.0486945], [3, 0.666667, 0.0486945]], [0.6, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("RHipPitch")
        times.append([0.96, 2.96, 4.96])
        keys.append([[0.123172, [3, -0.333333, 0], [3, 0.666667, 0]], [0.123172, [3, -0.666667, 0], [3, 0.666667, 0]], [0.123172, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("RHipRoll")
        times.append([0.96, 2.96, 4.96])
        keys.append([[-0.118644, [3, -0.333333, 0], [3, 0.666667, 0]], [-0.118644, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.112183, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("RHipYawPitch")
        times.append([0.96, 2.96, 4.96])
        keys.append([[-0.170194, [3, -0.333333, 0], [3, 0.666667, 0]], [-0.170194, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.170695, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("RKneePitch")
        times.append([0.96, 2.96, 4.96])
        keys.append([[-0.0872551, [3, -0.333333, 0], [3, 0.666667, 0]], [-0.0872551, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.0872551, [3, -0.666667, 0], [3, 0, 0]]])
        names.append("RShoulderPitch")
        times.append([0.96, 1.96, 2.96, 3.96, 4.96])
        keys.append([[1.43733, [3, -0.333333, 0], [3, 0.333333, 0]], [0.467748, [3, -0.333333, 0], [3, 0.333333, 0]], [0.968658, [3, -0.333333, 0], [3, 0.333333, 0]], [0.467748, [3, -0.333333, 0], [3, 0.333333, 0]], [0.820788, [3, -0.333333, 0], [3, 0, 0]]])
        names.append("RShoulderRoll")
        times.append([0.96, 1.96, 2.96, 3.96, 4.96])
        keys.append([[-0.216857, [3, -0.333333, 0], [3, 0.333333, 0]], [0.314159, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.93026, [3, -0.333333, 0], [3, 0.333333, 0]], [0.314159, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0553695, [3, -0.333333, 0], [3, 0, 0]]])
        names.append("RWristYaw")
        times.append([0.96, 1.96, 2.96, 3.96, 4.96])
        keys.append([[0.0977473, [3, -0.333333, 0], [3, 0.333333, 0]], [1.1781, [3, -0.333333, -0.287687], [3, 0.333333, 0.287687]], [1.82387, [3, -0.333333, 0], [3, 0.333333, 0]], [1.1781, [3, -0.333333, 0.263254], [3, 0.333333, -0.263254]], [0.244348, [3, -0.333333, 0], [3, 0, 0]]])
        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err
##################################################################################################################################################################################################################################################################################################################################################################################################################################
    def star(self):
        # Choregraphe bezier export in Python.
        from naoqi import ALProxy
        names = list()
        times = list()
        keys = list()
        names.append("HeadPitch")
        times.append([0.56, 1.16, 1.76, 2.36, 2.96])
        keys.append([[-0.174533, [3, -0.2, 0], [3, 0.2, 0]], [0.349066, [3, -0.2, 0], [3, 0.2, 0]], [-0.174533, [3, -0.2, 0], [3, 0.2, 0]], [0.349066, [3, -0.2, 0], [3, 0.2, 0]], [0.00602814, [3, -0.2, 0], [3, 0, 0]]])
        names.append("HeadYaw")
        times.append([1.16, 2.36, 2.96])
        keys.append([[0, [3, -0.4, 0], [3, 0.4, 0]], [0, [3, -0.4, 0], [3, 0.2, 0]], [0, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LAnklePitch")
        times.append([0.56, 1.16, 1.76, 2.36, 2.96])
        keys.append([[-0.349066, [3, -0.2, 0], [3, 0.2, 0]], [0.0866825, [3, -0.2, 0], [3, 0.2, 0]], [-0.349066, [3, -0.2, 0], [3, 0.2, 0]], [0.0866825, [3, -0.2, 0], [3, 0.2, 0]], [-0.342458, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LAnkleRoll")
        times.append([1.16, 2.36, 2.96])
        keys.append([[-0.101229, [3, -0.4, 0], [3, 0.4, 0]], [-0.101229, [3, -0.4, 0], [3, 0.2, 0]], [-0.000791166, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LElbowRoll")
        times.append([1.16, 2.36, 2.96])
        keys.append([[-1.54462, [3, -0.4, 0], [3, 0.4, 0]], [-1.54462, [3, -0.4, 0], [3, 0.2, 0]], [-1.01186, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LElbowYaw")
        times.append([0.56, 1.16, 1.76, 2.36, 2.96])
        keys.append([[-1.5708, [3, -0.2, 0], [3, 0.2, 0]], [1.5708, [3, -0.2, 0], [3, 0.2, 0]], [-1.5708, [3, -0.2, 0], [3, 0.2, 0]], [1.5708, [3, -0.2, 0], [3, 0.2, 0]], [-1.38976, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LHand")
        times.append([1.16, 2.36, 2.96])
        keys.append([[1, [3, -0.4, 0], [3, 0.4, 0]], [1, [3, -0.4, 0], [3, 0.2, 0]], [0.255862, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LHipPitch")
        times.append([0.56, 1.16, 1.76, 2.36, 2.96])
        keys.append([[-0.349066, [3, -0.2, 0], [3, 0.2, 0]], [0.123918, [3, -0.2, 0], [3, 0.2, 0]], [-0.349066, [3, -0.2, 0], [3, 0.2, 0]], [0.123918, [3, -0.2, 0], [3, 0.2, 0]], [-0.440088, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LHipRoll")
        times.append([1.16, 2.36, 2.96])
        keys.append([[0.118682, [3, -0.4, 0], [3, 0.4, 0]], [0.118682, [3, -0.4, 0], [3, 0.2, 0]], [0.00774902, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LHipYawPitch")
        times.append([1.16, 2.36, 2.96])
        keys.append([[-0.171042, [3, -0.4, 0], [3, 0.4, 0]], [-0.171042, [3, -0.4, 0], [3, 0.2, 0]], [-0.0029538, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LKneePitch")
        times.append([0.56, 1.16, 1.76, 2.36, 2.96])
        keys.append([[0.698132, [3, -0.2, 0], [3, 0.2, 0]], [-0.0872551, [3, -0.2, 0], [3, 0.2, 0]], [0.698132, [3, -0.2, 0], [3, 0.2, 0]], [-0.0872551, [3, -0.2, 0], [3, 0.2, 0]], [0.698434, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LShoulderPitch")
        times.append([1.16, 2.36, 2.96])
        keys.append([[0, [3, -0.4, 0], [3, 0.4, 0]], [0, [3, -0.4, 0], [3, 0.2, 0]], [1.39513, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LShoulderRoll")
        times.append([1.16, 2.36, 2.96])
        keys.append([[1.309, [3, -0.4, 0], [3, 0.4, 0]], [1.309, [3, -0.4, 0], [3, 0.2, 0]], [0.301781, [3, -0.2, 0], [3, 0, 0]]])
        names.append("LWristYaw")
        times.append([1.16, 2.36, 2.96])
        keys.append([[0, [3, -0.4, 0], [3, 0.4, 0]], [0, [3, -0.4, 0], [3, 0.2, 0]], [-0.00625175, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RAnklePitch")
        times.append([0.56, 1.16, 1.76, 2.36, 2.96])
        keys.append([[-0.349066, [3, -0.2, 0], [3, 0.2, 0]], [0.0866825, [3, -0.2, 0], [3, 0.2, 0]], [-0.349066, [3, -0.2, 0], [3, 0.2, 0]], [0.0866825, [3, -0.2, 0], [3, 0.2, 0]], [-0.342458, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RAnkleRoll")
        times.append([1.16, 2.36, 2.96])
        keys.append([[0.102612, [3, -0.4, 0], [3, 0.4, 0]], [0.102612, [3, -0.4, 0], [3, 0.2, 0]], [0.000801974, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RElbowRoll")
        times.append([1.16, 2.36, 2.96])
        keys.append([[1.54462, [3, -0.4, 0], [3, 0.4, 0]], [1.54462, [3, -0.4, 0], [3, 0.2, 0]], [1.01186, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RElbowYaw")
        times.append([0.56, 1.16, 1.76, 2.36, 2.96])
        keys.append([[-1.5708, [3, -0.2, 0], [3, 0.2, 0]], [1.5708, [3, -0.2, 0], [3, 0.2, 0]], [-1.5708, [3, -0.2, 0], [3, 0.2, 0]], [1.5708, [3, -0.2, 0], [3, 0.2, 0]], [1.39241, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RHand")
        times.append([1.16, 2.36, 2.96])
        keys.append([[0.993634, [3, -0.4, 0], [3, 0.4, 0]], [0.993634, [3, -0.4, 0], [3, 0.2, 0]], [0.255812, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RHipPitch")
        times.append([0.56, 1.16, 1.76, 2.36, 2.96])
        keys.append([[-0.349066, [3, -0.2, 0], [3, 0.2, 0]], [0.133733, [3, -0.2, 0], [3, 0.2, 0]], [-0.349066, [3, -0.2, 0], [3, 0.2, 0]], [0.133733, [3, -0.2, 0], [3, 0.2, 0]], [-0.45, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RHipRoll")
        times.append([1.16, 2.36, 2.96])
        keys.append([[-0.115132, [3, -0.4, 0], [3, 0.4, 0]], [-0.115132, [3, -0.4, 0], [3, 0.2, 0]], [-0.00751719, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RHipYawPitch")
        times.append([1.16, 2.36, 2.96])
        keys.append([[-0.171042, [3, -0.4, 0], [3, 0.4, 0]], [-0.171042, [3, -0.4, 0], [3, 0.2, 0]], [-0.0029538, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RKneePitch")
        times.append([0.56, 1.16, 1.76, 2.36, 2.96])
        keys.append([[0.698132, [3, -0.2, 0], [3, 0.2, 0]], [-0.0872551, [3, -0.2, 0], [3, 0.2, 0]], [0.698132, [3, -0.2, 0], [3, 0.2, 0]], [-0.0872551, [3, -0.2, 0], [3, 0.2, 0]], [0.698434, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RShoulderPitch")
        times.append([1.16, 2.36, 2.96])
        keys.append([[0, [3, -0.4, 0], [3, 0.4, 0]], [0, [3, -0.4, 0], [3, 0.2, 0]], [1.39513, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RShoulderRoll")
        times.append([1.16, 2.36, 2.96])
        keys.append([[-1.309, [3, -0.4, 0], [3, 0.4, 0]], [-1.309, [3, -0.4, 0], [3, 0.2, 0]], [-0.301781, [3, -0.2, 0], [3, 0, 0]]])
        names.append("RWristYaw")
        times.append([1.16, 2.36, 2.96])
        keys.append([[0, [3, -0.4, 0], [3, 0.4, 0]], [0, [3, -0.4, 0], [3, 0.2, 0]], [0.00452276, [3, -0.2, 0], [3, 0, 0]]])
        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err
          ##################################################################################################################################################################################################################################
    def clack(self):
        names = list()
        times = list()
        keys = list()
        names.append("HeadPitch")
        times.append([0.52, 0.84])
        keys.append([[-0.174171, [3, -0.186667, 0], [3, 0.106667, 0]], [-0.174171, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("HeadYaw")
        times.append([0.52, 0.84])
        keys.append([[-0.00695748, [3, -0.186667, 0], [3, 0.106667, 0]], [-0.00695748, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LAnklePitch")
        times.append([0.52, 0.84])
        keys.append([[0.0914655, [3, -0.186667, 0], [3, 0.106667, 0]], [0.0914655, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LAnkleRoll")
        times.append([0.52, 0.84])
        keys.append([[-0.101369, [3, -0.186667, 0], [3, 0.106667, 0]], [-0.101369, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LElbowRoll")
        times.append([0.52, 0.84])
        keys.append([[-0.422946, [3, -0.186667, 0], [3, 0.106667, 0]], [-0.422946, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LElbowYaw")
        times.append([0.52, 0.84])
        keys.append([[-1.20298, [3, -0.186667, 0], [3, 0.106667, 0]], [-1.20298, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LHand")
        times.append([0.52, 0.84])
        keys.append([[0.301882, [3, -0.186667, 0], [3, 0.106667, 0]], [0.301882, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LHipPitch")
        times.append([0.52, 0.84])
        keys.append([[0.127493, [3, -0.186667, 0], [3, 0.106667, 0]], [0.127493, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LHipRoll")
        times.append([0.52, 0.84])
        keys.append([[0.118347, [3, -0.186667, 0], [3, 0.106667, 0]], [0.118347, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LHipYawPitch")
        times.append([0.52, 0.84])
        keys.append([[-0.174671, [3, -0.186667, 0], [3, 0.106667, 0]], [-0.174671, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LKneePitch")
        times.append([0.52, 0.84])
        keys.append([[-0.0853155, [3, -0.186667, 0], [3, 0.106667, 0]], [-0.0853155, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LShoulderPitch")
        times.append([0.52, 0.84])
        keys.append([[1.43688, [3, -0.186667, 0], [3, 0.106667, 0]], [1.43688, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LShoulderRoll")
        times.append([0.52, 0.84])
        keys.append([[0.223158, [3, -0.186667, 0], [3, 0.106667, 0]], [0.223158, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("LWristYaw")
        times.append([0.52, 0.84])
        keys.append([[0.0984751, [3, -0.186667, 0], [3, 0.106667, 0]], [0.0984751, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RAnklePitch")
        times.append([0.52, 0.84])
        keys.append([[0.0882887, [3, -0.186667, 0], [3, 0.106667, 0]], [0.0882887, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RAnkleRoll")
        times.append([0.52, 0.84])
        keys.append([[0.113558, [3, -0.186667, 0], [3, 0.106667, 0]], [0.113558, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RElbowRoll")
        times.append([0.52, 0.84])
        keys.append([[1.54266, [3, -0.186667, 0], [3, 0.106667, 0]], [1.54266, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RElbowYaw")
        times.append([0.52, 0.84])
        keys.append([[2.08038, [3, -0.186667, 0], [3, 0.106667, 0]], [2.08038, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RHand")
        times.append([0.36, 0.52, 0.68, 0.84])
        keys.append([[0.56, [3, -0.133333, 0], [3, 0.0533333, 0]], [0.2, [3, -0.0533333, 0], [3, 0.0533333, 0]], [0.56, [3, -0.0533333, 0], [3, 0.0533333, 0]], [0.2, [3, -0.0533333, 0], [3, 0, 0]]])
        names.append("RHipPitch")
        times.append([0.52, 0.84])
        keys.append([[0.128033, [3, -0.186667, 0], [3, 0.106667, 0]], [0.128033, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RHipRoll")
        times.append([0.52, 0.84])
        keys.append([[-0.116214, [3, -0.186667, 0], [3, 0.106667, 0]], [-0.116214, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RHipYawPitch")
        times.append([0.52, 0.84])
        keys.append([[-0.174671, [3, -0.186667, 0], [3, 0.106667, 0]], [-0.174671, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RKneePitch")
        times.append([0.52, 0.84])
        keys.append([[-0.0826476, [3, -0.186667, 0], [3, 0.106667, 0]], [-0.0826476, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RShoulderPitch")
        times.append([0.52, 0.84])
        keys.append([[1.46879, [3, -0.186667, 0], [3, 0.106667, 0]], [1.46879, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RShoulderRoll")
        times.append([0.52, 0.84])
        keys.append([[-0.0951325, [3, -0.186667, 0], [3, 0.106667, 0]], [-0.0951325, [3, -0.106667, 0], [3, 0, 0]]])
        names.append("RWristYaw")
        times.append([0.52, 0.84])
        keys.append([[0.748296, [3, -0.186667, 0], [3, 0.106667, 0]], [0.748296, [3, -0.106667, 0], [3, 0, 0]]])
        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err
    
    def technologic(self):
            ttsProxy = ALProxy("ALTextToSpeech")
            self.clack()
            time.sleep(0.4)
            ttsProxy.say("Technologic")
            time.sleep(0.4)
            self.clack()
            time.sleep(0.4)
            ttsProxy.say("Technologic")
            time.sleep(0.4)
            self.clack()
            time.sleep(0.4)
            ttsProxy.say("Technologic")
            time.sleep(0.4)
            self.clack()
            time.sleep(0.4)
            ttsProxy.say("Technologic")
###################################################################################################################################################################################################################################################################
    def sit(self):
        try:
                postureProxy = ALProxy("ALRobotPosture")
            except Exception, e:
                print "Could not create proxy to ALRobotPosture"
                print "Error was: ", e
            postureProxy.goToPosture("Sit", 1.0)
    
    def standZero(self):
        names = list()
        times = list()
        keys = list()
        
        names.append("HeadPitch")
        times.append([0.32])
        keys.append([-0.00883599])
        
        names.append("HeadYaw")
        times.append([0.32])
        keys.append([-0.00361372])
        
        names.append("LAnklePitch")
        times.append([0.32])
        keys.append([-0.00688659])
        
        names.append("LAnkleRoll")
        times.append([0.32])
        keys.append([-0.00532647])
        
        names.append("LElbowRoll")
        times.append([0.32])
        keys.append([-0.0413811])
        
        names.append("LElbowYaw")
        times.append([0.32])
        keys.append([-0.00261218])
        
        names.append("LHand")
        times.append([0.32])
        keys.append([0.000567943])
        
        names.append("LHipPitch")
        times.append([0.32])
        keys.append([-0.00885419])
        
        names.append("LHipRoll")
        times.append([0.32])
        keys.append([0.00546251])
        
        names.append("LHipYawPitch")
        times.append([0.32])
        keys.append([-0.00864068])
        
        names.append("LKneePitch")
        times.append([0.32])
        keys.append([0.00159024])
        
        names.append("LShoulderPitch")
        times.append([0.32])
        keys.append([0.00263098])
        
        names.append("LShoulderRoll")
        times.append([0.32])
        keys.append([0.0146277])
        
        names.append("LWristYaw")
        times.append([0.32])
        keys.append([0.00138806])
        
        names.append("RAnklePitch")
        times.append([0.32])
        keys.append([-0.00688659])
        
        names.append("RAnkleRoll")
        times.append([0.32])
        keys.append([0.00188465])
        
        names.append("RElbowRoll")
        times.append([0.32])
        keys.append([0.0413811])
        
        names.append("RElbowYaw")
        times.append([0.32])
        keys.append([0.00261218])
        
        names.append("RHand")
        times.append([0.32])
        keys.append([0.000567943])
        
        names.append("RHipPitch")
        times.append([0.32])
        keys.append([-0.00885419])
        
        names.append("RHipRoll")
        times.append([0.32])
        keys.append([-0.0054632])
        
        names.append("RHipYawPitch")
        times.append([0.32])
        keys.append([-0.00864068])
        
        names.append("RKneePitch")
        times.append([0.32])
        keys.append([0.00159024])
        
        names.append("RShoulderPitch")
        times.append([0.32])
        keys.append([0.00263098])
        
        names.append("RShoulderRoll")
        times.append([0.32])
        keys.append([-0.0146277])
        
        names.append("RWristYaw")
        times.append([0.32])
        keys.append([0.00135808])
        
        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolation(names, keys, times, True)
        except BaseException, err:
          print err
    
    def stand(self):

        names = list()
        times = list()
        keys = list()
        
        names.append("HeadPitch")
        times.append([0.4])
        keys.append([-0.168637])
        
        names.append("HeadYaw")
        times.append([0.4])
        keys.append([-0.00361372])
        
        names.append("LAnklePitch")
        times.append([0.4])
        keys.append([0.0815694])
        
        names.append("LAnkleRoll")
        times.append([0.4])
        keys.append([-0.100899])
        
        names.append("LElbowRoll")
        times.append([0.4])
        keys.append([-0.415277])
        
        names.append("LElbowYaw")
        times.append([0.4])
        keys.append([-1.20047])
        
        names.append("LHand")
        times.append([0.4])
        keys.append([0.290728])
        
        names.append("LHipPitch")
        times.append([0.4])
        keys.append([0.126397])
        
        names.append("LHipRoll")
        times.append([0.4])
        keys.append([0.119108])
        
        names.append("LHipYawPitch")
        times.append([0.4])
        keys.append([-0.168646])
        
        names.append("LKneePitch")
        times.append([0.4])
        keys.append([-0.0840831])
        
        names.append("LShoulderPitch")
        times.append([0.4])
        keys.append([1.43993])
        
        names.append("LShoulderRoll")
        times.append([0.4])
        keys.append([0.215231])
        
        names.append("LWristYaw")
        times.append([0.4])
        keys.append([0.0912954])
        
        names.append("RAnklePitch")
        times.append([0.4])
        keys.append([0.0815693])
        
        names.append("RAnkleRoll")
        times.append([0.4])
        keys.append([0.100896])
        
        names.append("RElbowRoll")
        times.append([0.4])
        keys.append([0.415277])
        
        names.append("RElbowYaw")
        times.append([0.4])
        keys.append([1.20047])
        
        names.append("RHand")
        times.append([0.4])
        keys.append([0.290728])
        
        names.append("RHipPitch")
        times.append([0.4])
        keys.append([0.126397])
        
        names.append("RHipRoll")
        times.append([0.4])
        keys.append([-0.119102])
        
        names.append("RHipYawPitch")
        times.append([0.4])
        keys.append([-0.168646])
        
        names.append("RKneePitch")
        times.append([0.4])
        keys.append([-0.0840831])
        
        names.append("RShoulderPitch")
        times.append([0.4])
        keys.append([1.43993])
        
        names.append("RShoulderRoll")
        times.append([0.4])
        keys.append([-0.215231])
        
        names.append("RWristYaw")
        times.append([0.4])
        keys.append([0.0912954])
        
        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolation(names, keys, times, True)
        except BaseException, err:
          print err
        
        def sitRelax(self):
            try:
                postureProxy = ALProxy("ALRobotPosture")
            except Exception, e:
                print "Could not create proxy to ALRobotPosture"
                print "Error was: ", e
            postureProxy.goToPosture("SitRelax", 1.0)
        
        def crouch(self):
            try:
                postureProxy = ALProxy("ALRobotPosture")
            except Exception, e:
                print "Could not create proxy to ALRobotPosture"
                print "Error was: ", e
            postureProxy.goToPosture("Crouch", 1.0)
        


